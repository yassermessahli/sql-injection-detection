SELECT name FROM customers;
SELECT * FROM orders WHERE order_date > '2023-01-01';
INSERT INTO products (name, price) VALUES ('Widget', 19.99);
UPDATE employees SET salary = salary * 1.05 WHERE department = 'Sales';
DELETE FROM sessions WHERE session_id = 12345;
SELECT COUNT(*) FROM users WHERE active = 1;
SELECT DISTINCT city FROM customers;
SELECT AVG(price) FROM products;
SELECT * FROM orders ORDER BY order_date DESC;
SELECT name, email FROM customers WHERE country = 'USA';
SELECT * FROM products WHERE price BETWEEN 10 AND 50;
SELECT MAX(salary) FROM employees;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Canada');
INSERT INTO customers (name, email, country) VALUES ('John Doe', 'john@example.com', 'USA');
UPDATE products SET stock = stock - 1 WHERE id = 101;
DELETE FROM products WHERE id NOT IN (SELECT product_id FROM order_items);
SELECT * FROM employees WHERE hire_date < '2020-01-01' AND department = 'HR';
SELECT name, COUNT(*) FROM orders GROUP BY name;
SELECT * FROM customers WHERE name LIKE 'A%';
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders);
SELECT * FROM products WHERE name LIKE '%phone%';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id);
SELECT department, SUM(salary) FROM employees GROUP BY department;
INSERT INTO orders (customer_id, order_date, total) VALUES (1, '2024-01-01', 100.00);
UPDATE customers SET last_login = NOW() WHERE id = 1;
DELETE FROM employees WHERE department = 'Interns';
SELECT * FROM products WHERE stock < 10 ORDER BY stock ASC;
SELECT name, email FROM customers WHERE email IS NOT NULL;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31';
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id HAVING COUNT(*) > 5;
SELECT * FROM employees WHERE salary IN (50000, 60000, 70000);
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products);
SELECT DISTINCT country FROM customers ORDER BY country;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Alice');
SELECT * FROM products WHERE created_at >= '2023-01-01';
INSERT INTO employees (name, department, salary) VALUES ('Jane Smith', 'Marketing', 55000);
UPDATE orders SET status = 'shipped' WHERE order_id = 123;
DELETE FROM sessions WHERE created_at < NOW() - INTERVAL 30 DAY;
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Electronics', 'Books');
SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Bob');
SELECT * FROM products WHERE price <= ALL (SELECT price FROM products WHERE category = 'Toys');
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO customers (name, email, country) VALUES ('Mary Johnson', 'mary@example.com', 'Canada');
UPDATE products SET price = price * 0.9 WHERE category = 'Clothing';
DELETE FROM employees WHERE salary < 30000;
SELECT * FROM orders WHERE status = 'pending' OR status = 'processing';
SELECT name, COUNT(*) AS order_count FROM orders WHERE order_date >= '2023-01-01' GROUP BY name;
SELECT * FROM customers WHERE country NOT IN ('USA', 'Canada');
SELECT * FROM products WHERE created_at >= NOW() - INTERVAL 1 MONTH;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Germany');
SELECT * FROM employees WHERE department = 'Sales' AND hire_date < '2021-01-01';
SELECT name, MAX(salary) FROM employees GROUP BY name;
SELECT * FROM products WHERE category = 'Electronics' AND price < 100;
INSERT INTO orders (customer_id, order_date, total) VALUES (3, '2024-02-01', 150.00);
UPDATE customers SET country = 'USA' WHERE country = 'United States';
DELETE FROM products WHERE name = 'Old Widget';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id HAVING COUNT(*) > 10;
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;
SELECT * FROM orders WHERE total < (SELECT MIN(total) FROM orders);
SELECT DISTINCT name FROM customers WHERE country = 'France';
SELECT * FROM products WHERE stock > 50 ORDER BY stock ASC;
SELECT * FROM customers WHERE last_login IS NULL;
SELECT name, COUNT(*) FROM orders WHERE order_date >= '2023-01-01' GROUP BY name ORDER BY COUNT(*) DESC;
SELECT * FROM employees WHERE department = 'HR' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'HR');
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'Charlie');
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Furniture');
INSERT INTO employees (name, department, salary) VALUES ('Tom Brown', 'IT', 70000);
UPDATE orders SET status = 'completed' WHERE order_id = 456;
DELETE FROM sessions WHERE user_id = 789;
SELECT * FROM customers WHERE country = 'Australia' AND active = 1;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-06-30';
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM employees WHERE hire_date < '2018-01-01' AND salary > 50000;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND order_date > '2023-01-01');
SELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE country = 'Italy');
SELECT * FROM products WHERE price < (SELECT AVG(price) FROM products WHERE category = 'Clothing');
SELECT * FROM employees WHERE name LIKE '%Smith%';
INSERT INTO products (name, price, stock) VALUES ('Gizmo', 49.99, 200);
UPDATE customers SET email = 'updatedemail@example.com' WHERE id = 3;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM customers WHERE phone IS NOT NULL;
SELECT name, COUNT(*) AS order_count FROM orders GROUP BY name ORDER BY order_count DESC;
SELECT * FROM products WHERE category IN ('Toys', 'Games');
SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000;
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders WHERE order_date >= '2023-01-01');
SELECT * FROM customers WHERE name LIKE '%son%';
SELECT * FROM products WHERE stock > 0 ORDER BY price DESC;
SELECT name, email FROM customers WHERE country = 'UK' AND active = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
INSERT INTO products (name, price, stock) VALUES ('Gadget', 29.99, 100);
UPDATE customers SET email = 'newemail@example.com' WHERE id = 2;
DELETE FROM orders WHERE order_date < '2023-01-01';
SELECT * FROM employees WHERE hire_date BETWEEN '2019-01-01' AND '2020-12-31';
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.id = orders.customer_id AND total > 100);
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100));
DROP TABLE IF EXISTS temporary_table;
ALTER TABLE employees ADD COLUMN birthdate DATE;
CREATE INDEX idx_customer_name ON customers (name);
DELETE FROM sessions WHERE created_at < NOW() - INTERVAL 1 DAY;
GRANT SELECT ON orders TO user1;
REVOKE INSERT ON orders FROM user2;
INSERT INTO logs (action, created_at) VALUES ('INSERT', NOW());
UPDATE settings SET value = 'new_value' WHERE key = 'setting_key';
BEGIN TRANSACTION;
COMMIT;
ROLLBACK;
CREATE VIEW active_customers AS SELECT * FROM customers WHERE active = 1;
SELECT * FROM active_customers;
CREATE OR REPLACE FUNCTION calculate_tax(amount DECIMAL) RETURNS DECIMAL AS 'SELECT amount * 0.1;' LANGUAGE SQL;
CALL calculate_tax(1000);
SET FOREIGN_KEY_CHECKS = 0;
SET FOREIGN_KEY_CHECKS = 1;
CREATE TEMPORARY TABLE tmp_orders AS SELECT * FROM orders WHERE total > 100;
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'customers';
TRUNCATE TABLE logs;
EXEC sp_help 'customers';
UPDATE products SET stock = stock - sold WHERE product_id = 10;
INSERT INTO purchase_history (product_id, quantity) VALUES (1, 3);
ALTER TABLE orders MODIFY COLUMN total DECIMAL(10, 2);
SELECT AVG(total) FROM orders WHERE order_date > CURRENT_DATE - INTERVAL '30 days';
INSERT INTO employees (name, department) SELECT name, department FROM new_employees;
CREATE TRIGGER update_inventory AFTER INSERT ON purchase_history FOR EACH ROW BEGIN UPDATE products SET stock = stock - NEW.quantity WHERE product_id = NEW.product_id; END;
DROP TRIGGER IF EXISTS update_inventory;
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, order_date DATE, total DECIMAL(10, 2));
ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(id);
DROP INDEX idx_customer_name ON customers;
CREATE UNIQUE INDEX idx_email ON customers (email);
ALTER TABLE employees DROP COLUMN birthdate;
CREATE TABLE logs (id INT PRIMARY KEY, action VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO logs (action) VALUES ('User login');
SELECT * FROM logs WHERE created_at >= NOW() - INTERVAL 1 DAY;
CREATE VIEW recent_logs AS SELECT * FROM logs WHERE created_at >= NOW() - INTERVAL 1 WEEK;
SELECT * FROM recent_logs;
UPDATE logs SET action = 'User logout' WHERE id = 1;
DELETE FROM logs WHERE created_at < NOW() - INTERVAL 1 MONTH;
SELECT COUNT(*) FROM customers;
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(100), price DECIMAL(10, 2));
INSERT INTO products (name, price) VALUES ('Product A', 25.00);
UPDATE products SET price = price * 1.1 WHERE id = 1;
DELETE FROM products WHERE price < 10;
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO categories (name) VALUES ('Electronics');
ALTER TABLE products ADD COLUMN category_id INT;
UPDATE products SET category_id = 1 WHERE id = 1;
CREATE INDEX idx_category ON products (category_id);
SELECT p.name, c.name FROM products p JOIN categories c ON p.category_id = c.id;
CREATE TABLE purchase_history (id INT PRIMARY KEY, product_id INT, quantity INT, purchase_date DATE);
INSERT INTO purchase_history (product_id, quantity, purchase_date) VALUES (1, 2, NOW());
SELECT * FROM purchase_history WHERE purchase_date = CURRENT_DATE;
CREATE TRIGGER log_purchase AFTER INSERT ON purchase_history FOR EACH ROW BEGIN INSERT INTO logs (action) VALUES (CONCAT('Purchased ', NEW.quantity, ' of product ID ', NEW.product_id)); END;
DROP TRIGGER IF EXISTS log_purchase;
CREATE TABLE settings (key VARCHAR(100) PRIMARY KEY, value VARCHAR(100));
INSERT INTO settings (key, value) VALUES ('site_name', 'My Website');
SELECT * FROM settings;
UPDATE settings SET value = 'New Website' WHERE key = 'site_name';
DELETE FROM settings WHERE key = 'site_name';
CREATE TABLE sessions (id INT PRIMARY KEY, user_id INT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO sessions (user_id) VALUES (1);
SELECT * FROM sessions WHERE created_at >= NOW() - INTERVAL 1 HOUR;
CREATE TRIGGER expire_sessions BEFORE DELETE ON sessions FOR EACH ROW BEGIN DELETE FROM logs WHERE created_at < OLD.created_at - INTERVAL 1 DAY; END;
DROP TRIGGER IF EXISTS expire_sessions;
CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(100), password VARCHAR(100));
INSERT INTO users (username, password) VALUES ('admin', 'password');
SELECT * FROM users WHERE username = 'admin';
UPDATE users SET password = 'newpassword' WHERE username = 'admin';
DELETE FROM users WHERE username = 'admin';
CREATE TABLE feedback (id INT PRIMARY KEY, user_id INT, comment TEXT);
INSERT INTO feedback (user_id, comment) VALUES (1, 'Great service!');
SELECT * FROM feedback WHERE user_id = 1;
UPDATE feedback SET comment = 'Excellent service!' WHERE id = 1;
DELETE FROM feedback WHERE id = 1;
CREATE TABLE discounts (id INT PRIMARY KEY, product_id INT, discount_rate DECIMAL(5, 2));
INSERT INTO discounts (product_id, discount_rate) VALUES (1, 10.00);
SELECT * FROM discounts WHERE product_id = 1;
UPDATE discounts SET discount_rate = 15.00 WHERE id = 1;
DELETE FROM discounts WHERE id = 1;
CREATE TABLE inventory (id INT PRIMARY KEY, product_id INT, quantity INT);
INSERT INTO inventory (product_id, quantity) VALUES (1, 100);
SELECT * FROM inventory WHERE product_id = 1;
UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 1;
DELETE FROM inventory WHERE quantity = 0;
CREATE TABLE orders_history (id INT PRIMARY KEY, order_id INT, status VARCHAR(100), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO orders_history (order_id, status) VALUES (1, 'Shipped');
SELECT * FROM orders_history WHERE order_id = 1;
UPDATE orders_history SET status = 'Delivered' WHERE id = 1;
DELETE FROM orders_history WHERE id = 1;
CREATE TABLE wishlists (id INT PRIMARY KEY, user_id INT, product_id INT);
INSERT INTO wishlists (user_id, product_id) VALUES (1, 1);
SELECT * FROM wishlists WHERE user_id = 1;
DELETE FROM wishlists WHERE id = 1;
CREATE TABLE addresses (id INT PRIMARY KEY, user_id INT, address TEXT);
INSERT INTO addresses (user_id, address) VALUES (1, '123 Main St');
SELECT * FROM addresses WHERE user_id = 1;
UPDATE addresses SET address = '456 Elm St' WHERE id = 1;
DELETE FROM addresses WHERE id = 1;
CREATE TABLE transactions (id INT PRIMARY KEY, user_id INT, amount DECIMAL(10, 2), transaction_date DATE);
INSERT INTO transactions (user_id, amount, transaction_date) VALUES (1, 100.00, NOW());
SELECT * FROM transactions WHERE user_id = 1;
UPDATE transactions SET amount = 150.00 WHERE id = 1;
DELETE FROM transactions WHERE id = 1;
CREATE TABLE notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO notifications (user_id, message) VALUES (1, 'Welcome to our service!');
SELECT * FROM notifications WHERE user_id = 1;
UPDATE notifications SET message = 'New message!' WHERE id = 1;
DELETE FROM notifications WHERE id = 1;
CREATE TABLE roles (id INT PRIMARY KEY, name VARCHAR(100));
INSERT INTO roles (name) VALUES ('Admin');
SELECT * FROM roles;
UPDATE roles SET name = 'User' WHERE id = 1;
DELETE FROM roles WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE transactions_history (id INT PRIMARY KEY, transaction_id INT, status VARCHAR(100), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO transactions_history (transaction_id, status) VALUES (1, 'Completed');
SELECT * FROM transactions_history WHERE transaction_id = 1;
UPDATE transactions_history SET status = 'Failed' WHERE id = 1;
DELETE FROM transactions_history WHERE id = 1;
CREATE TABLE product_reviews (id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, comment TEXT);
INSERT INTO product_reviews (product_id, user_id, rating, comment) VALUES (1, 1, 5, 'Excellent product!');
SELECT * FROM product_reviews WHERE product_id = 1;
UPDATE product_reviews SET rating = 4 WHERE id = 1;
DELETE FROM product_reviews WHERE id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'token123');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'token456' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE payment_methods (id INT PRIMARY KEY, user_id INT, method VARCHAR(100));
INSERT INTO payment_methods (user_id, method) VALUES (1, 'Credit Card');
SELECT * FROM payment_methods WHERE user_id = 1;
UPDATE payment_methods SET method = 'PayPal' WHERE id = 1;
DELETE FROM payment_methods WHERE id = 1;
CREATE TABLE shipping_addresses (id INT PRIMARY KEY, user_id INT, address TEXT);
INSERT INTO shipping_addresses (user_id, address) VALUES (1, '789 Oak St');
SELECT * FROM shipping_addresses WHERE user_id = 1;
UPDATE shipping_addresses SET address = '101 Pine St' WHERE id = 1;
DELETE FROM shipping_addresses WHERE id = 1;
CREATE TABLE product_categories (id INT PRIMARY KEY, product_id INT, category_id INT);
INSERT INTO product_categories (product_id, category_id) VALUES (1, 1);
SELECT * FROM product_categories WHERE product_id = 1;
DELETE FROM product_categories WHERE product_id = 1 AND category_id = 1;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT);
INSERT INTO user_feedback (user_id, feedback) VALUES (1, 'Great experience!');
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Amazing service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
CREATE TABLE order_items (id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 1, 2);
SELECT * FROM order_items WHERE order_id = 1;
UPDATE order_items SET quantity = 3 WHERE id = 1;
DELETE FROM order_items WHERE id = 1;
CREATE TABLE user_activity (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity (user_id, activity) VALUES (1, 'Logged in');
SELECT * FROM user_activity WHERE user_id = 1;
UPDATE user_activity SET activity = 'Logged out' WHERE id = 1;
DELETE FROM user_activity WHERE id = 1;
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference TEXT);
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Dark mode');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'Light mode' WHERE id = 1;
DELETE FROM user_preferences WHERE id = 1;
CREATE TABLE session_tokens (id INT PRIMARY KEY, user_id INT, token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO session_tokens (user_id, token) VALUES (1, 'token789');
SELECT * FROM session_tokens WHERE user_id = 1;
UPDATE session_tokens SET token = 'token101' WHERE id = 1;
DELETE FROM session_tokens WHERE id = 1;
CREATE TABLE notifications_settings (id INT PRIMARY KEY, user_id INT, setting VARCHAR(100));
INSERT INTO notifications_settings (user_id, setting) VALUES (1, 'Email notifications');
SELECT * FROM notifications_settings WHERE user_id = 1;
UPDATE notifications_settings SET setting = 'SMS notifications' WHERE id = 1;
DELETE FROM notifications_settings WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'session_token_1');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'session_token_2' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE user_notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_notifications (user_id, message) VALUES (1, 'You have a new message.');
SELECT * FROM user_notifications WHERE user_id = 1;
UPDATE user_notifications SET message = 'Your profile has been updated.' WHERE id = 1;
DELETE FROM user_notifications WHERE id = 1;
CREATE TABLE user_settings (id INT PRIMARY KEY, user_id INT, setting_name VARCHAR(100), setting_value VARCHAR(100));
INSERT INTO user_settings (user_id, setting_name, setting_value) VALUES (1, 'theme', 'dark');
SELECT * FROM user_settings WHERE user_id = 1;
UPDATE user_settings SET setting_value = 'light' WHERE id = 1;
DELETE FROM user_settings WHERE id = 1;
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(100));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'new');
SELECT * FROM product_tags WHERE product_id = 1;
DELETE FROM product_tags WHERE product_id = 1 AND tag = 'new';
CREATE TABLE user_subscriptions (id INT PRIMARY KEY, user_id INT, subscription_type VARCHAR(100));
INSERT INTO user_subscriptions (user_id, subscription_type) VALUES (1, 'premium');
SELECT * FROM user_subscriptions WHERE user_id = 1;
UPDATE user_subscriptions SET subscription_type = 'basic' WHERE id = 1;
DELETE FROM user_subscriptions WHERE id = 1;
CREATE TABLE user_activity_log (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity_log (user_id, activity) VALUES (1, 'Logged in.');
SELECT * FROM user_activity_log WHERE user_id = 1;
UPDATE user_activity_log SET activity = 'Logged out.' WHERE id = 1;
DELETE FROM user_activity_log WHERE id = 1;
CREATE TABLE user_feedback (id INT PRIMARY KEY, user_id INT, feedback TEXT);
INSERT INTO user_feedback (user_id, feedback) VALUES (1, 'Great service!');
SELECT * FROM user_feedback WHERE user_id = 1;
UPDATE user_feedback SET feedback = 'Excellent service!' WHERE id = 1;
DELETE FROM user_feedback WHERE id = 1;
CREATE TABLE user_preferences (id INT PRIMARY KEY, user_id INT, preference TEXT);
INSERT INTO user_preferences (user_id, preference) VALUES (1, 'Dark mode');
SELECT * FROM user_preferences WHERE user_id = 1;
UPDATE user_preferences SET preference = 'Light mode' WHERE id = 1;
DELETE FROM user_preferences WHERE id = 1;
CREATE TABLE user_roles (user_id INT, role_id INT, PRIMARY KEY (user_id, role_id));
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1);
SELECT * FROM user_roles WHERE user_id = 1;
DELETE FROM user_roles WHERE user_id = 1 AND role_id = 1;
CREATE TABLE user_sessions (id INT PRIMARY KEY, user_id INT, session_token VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_sessions (user_id, session_token) VALUES (1, 'session_token_1');
SELECT * FROM user_sessions WHERE user_id = 1;
UPDATE user_sessions SET session_token = 'session_token_2' WHERE id = 1;
DELETE FROM user_sessions WHERE id = 1;
CREATE TABLE user_notifications (id INT PRIMARY KEY, user_id INT, message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_notifications (user_id, message) VALUES (1, 'You have a new message.');
SELECT * FROM user_notifications WHERE user_id = 1;
UPDATE user_notifications SET message = 'Your profile has been updated.' WHERE id = 1;
DELETE FROM user_notifications WHERE id = 1;
CREATE TABLE user_settings (id INT PRIMARY KEY, user_id INT, setting_name VARCHAR(100), setting_value VARCHAR(100));
INSERT INTO user_settings (user_id, setting_name, setting_value) VALUES (1, 'theme', 'dark');
SELECT * FROM user_settings WHERE user_id = 1;
UPDATE user_settings SET setting_value = 'light' WHERE id = 1;
DELETE FROM user_settings WHERE id = 1;
CREATE TABLE product_tags (id INT PRIMARY KEY, product_id INT, tag VARCHAR(100));
INSERT INTO product_tags (product_id, tag) VALUES (1, 'new');
SELECT * FROM product_tags WHERE product_id = 1;
DELETE FROM product_tags WHERE product_id = 1 AND tag = 'new';
CREATE TABLE user_subscriptions (id INT PRIMARY KEY, user_id INT, subscription_type VARCHAR(100));
INSERT INTO user_subscriptions (user_id, subscription_type) VALUES (1, 'premium');
SELECT * FROM user_subscriptions WHERE user_id = 1;
UPDATE user_subscriptions SET subscription_type = 'basic' WHERE id = 1;
DELETE FROM user_subscriptions WHERE id = 1;
CREATE TABLE user_activity_log (id INT PRIMARY KEY, user_id INT, activity TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
INSERT INTO user_activity_log (user_id, activity) VALUES (1, 'Logged in.');
SELECT * FROM user_activity_log WHERE user_id = 1;
UPDATE user_activity_log SET activity = 'Logged out.' WHERE id = 1;
DELETE FROM user_activity_log WHERE d = 1;
WITH recent_orders AS (SELECT customer_id, order_date FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH)) SELECT customer_id, COUNT(*) AS order_count FROM recent_orders GROUP BY customer_id;
SELECT employee_id, first_name, last_name, (SELECT COUNT(*) FROM orders WHERE employee_id = employees.id) AS orders_handled FROM employees;
SELECT p.product_name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.product_name HAVING total_sold > 100;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.name ORDER BY total_spent DESC;
SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id HAVING avg_salary > 50000;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT customer_id, COUNT(DISTINCT order_id) AS unique_orders FROM orders GROUP BY customer_id HAVING unique_orders > 5;
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name HAVING sold_count > 20;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= '2023-01-01' GROUP BY c.name;
SELECT customer_id, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id HAVING last_order_date < DATE_SUB(NOW(), INTERVAL 1 YEAR);
SELECT e.first_name, e.last_name, (SELECT COUNT(*) FROM orders WHERE employee_id = e.id) AS order_count FROM employees e WHERE e.hire_date < '2020-01-01';
WITH product_sales AS (SELECT product_id, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id) SELECT p.name, ps.total_quantity FROM products p JOIN product_sales ps ON p.id = ps.product_id WHERE ps.total_quantity > 50;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= '2023-01-01' GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.id WHERE d.name IS NOT NULL;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE p.category_id = 1 GROUP BY p.name HAVING total_sold > 10;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY c.name ORDER BY order_count DESC;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary > (SELECT AVG(salary) FROM employees);
SELECT p.name, p.price, (SELECT AVG(price) FROM products) AS avg_price FROM products p WHERE p.price > avg_price;
WITH department_salaries AS (SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id) SELECT d.name, ds.avg_salary FROM departments d JOIN department_salaries ds ON d.id = ds.department_id WHERE ds.avg_salary > 60000;
SELECT c.name, COUNT(o.id) AS total_orders FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.status = 'Completed' GROUP BY c.name;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name HAVING sold_count > 20;
SELECT c.name, COUNT(o.id) AS order_count FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= DATE_SUB(NOW(), INTERVAL 1 YEAR) GROUP BY c.name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary > (SELECT AVG(salary) FROM employees);
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'Los Angeles';
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;
SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE status = 'Shipped') GROUP BY p.name;
WITH recent_orders AS (SELECT customer_id, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 3 MONTH) GROUP BY customer_id) SELECT c.name, ro.order_count FROM customers c JOIN recent_orders ro ON c.id = ro.customer_id WHERE ro.order_count > 5;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT p.name, COUNT(oi.product_id) AS sold_count FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id IN (SELECT id FROM orders WHERE order_date >= '2023-01-01') GROUP BY p.name;
SELECT c.name, SUM(o.total) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name HAVING total_spent > 1000;
SELECT e.first_name, e.last_name, COUNT(o.id) AS orders_handled FROM employees e LEFT JOIN orders o ON e.id = o.employee_id GROUP BY e.id HAVING orders_handled > 10;